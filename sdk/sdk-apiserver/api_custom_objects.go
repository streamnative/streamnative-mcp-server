//
// Copyright Â© 2023-2024 StreamNative Inc.
//

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// CustomObjectsApiService CustomObjectsApi service
type CustomObjectsApiService service

type ApiCreateClusterCustomObjectRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	plural string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

// The JSON schema of the Resource to create.
func (r ApiCreateClusterCustomObjectRequest) Body(body map[string]interface{}) ApiCreateClusterCustomObjectRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiCreateClusterCustomObjectRequest) Pretty(pretty string) ApiCreateClusterCustomObjectRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiCreateClusterCustomObjectRequest) DryRun(dryRun string) ApiCreateClusterCustomObjectRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiCreateClusterCustomObjectRequest) FieldManager(fieldManager string) ApiCreateClusterCustomObjectRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered. (optional)
func (r ApiCreateClusterCustomObjectRequest) FieldValidation(fieldValidation string) ApiCreateClusterCustomObjectRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiCreateClusterCustomObjectRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateClusterCustomObjectExecute(r)
}

/*
CreateClusterCustomObject Method for CreateClusterCustomObject

Creates a cluster scoped Custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group The custom resource's group name
 @param version The custom resource's version
 @param plural The custom resource's plural name. For TPRs this would be lowercase plural kind.
 @return ApiCreateClusterCustomObjectRequest
*/
func (a *CustomObjectsApiService) CreateClusterCustomObject(ctx context.Context, group string, version string, plural string) ApiCreateClusterCustomObjectRequest {
	return ApiCreateClusterCustomObjectRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		plural: plural,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) CreateClusterCustomObjectExecute(r ApiCreateClusterCustomObjectRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.CreateClusterCustomObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/{plural}"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.fieldValidation != nil {
		localVarQueryParams.Add("fieldValidation", parameterToString(*r.fieldValidation, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateNamespacedCustomObjectRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	namespace string
	plural string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

// The JSON schema of the Resource to create.
func (r ApiCreateNamespacedCustomObjectRequest) Body(body map[string]interface{}) ApiCreateNamespacedCustomObjectRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiCreateNamespacedCustomObjectRequest) Pretty(pretty string) ApiCreateNamespacedCustomObjectRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiCreateNamespacedCustomObjectRequest) DryRun(dryRun string) ApiCreateNamespacedCustomObjectRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiCreateNamespacedCustomObjectRequest) FieldManager(fieldManager string) ApiCreateNamespacedCustomObjectRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered. (optional)
func (r ApiCreateNamespacedCustomObjectRequest) FieldValidation(fieldValidation string) ApiCreateNamespacedCustomObjectRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiCreateNamespacedCustomObjectRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateNamespacedCustomObjectExecute(r)
}

/*
CreateNamespacedCustomObject Method for CreateNamespacedCustomObject

Creates a namespace scoped Custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group The custom resource's group name
 @param version The custom resource's version
 @param namespace The custom resource's namespace
 @param plural The custom resource's plural name. For TPRs this would be lowercase plural kind.
 @return ApiCreateNamespacedCustomObjectRequest
*/
func (a *CustomObjectsApiService) CreateNamespacedCustomObject(ctx context.Context, group string, version string, namespace string, plural string) ApiCreateNamespacedCustomObjectRequest {
	return ApiCreateNamespacedCustomObjectRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		namespace: namespace,
		plural: plural,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) CreateNamespacedCustomObjectExecute(r ApiCreateNamespacedCustomObjectRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.CreateNamespacedCustomObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/namespaces/{namespace}/{plural}"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.fieldValidation != nil {
		localVarQueryParams.Add("fieldValidation", parameterToString(*r.fieldValidation, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteClusterCustomObjectRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	plural string
	name string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	dryRun *string
	body *V1DeleteOptions
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteClusterCustomObjectRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteClusterCustomObjectRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteClusterCustomObjectRequest) OrphanDependents(orphanDependents bool) ApiDeleteClusterCustomObjectRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
func (r ApiDeleteClusterCustomObjectRequest) PropagationPolicy(propagationPolicy string) ApiDeleteClusterCustomObjectRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteClusterCustomObjectRequest) DryRun(dryRun string) ApiDeleteClusterCustomObjectRequest {
	r.dryRun = &dryRun
	return r
}

func (r ApiDeleteClusterCustomObjectRequest) Body(body V1DeleteOptions) ApiDeleteClusterCustomObjectRequest {
	r.body = &body
	return r
}

func (r ApiDeleteClusterCustomObjectRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DeleteClusterCustomObjectExecute(r)
}

/*
DeleteClusterCustomObject Method for DeleteClusterCustomObject

Deletes the specified cluster scoped custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group the custom resource's group
 @param version the custom resource's version
 @param plural the custom object's plural name. For TPRs this would be lowercase plural kind.
 @param name the custom object's name
 @return ApiDeleteClusterCustomObjectRequest
*/
func (a *CustomObjectsApiService) DeleteClusterCustomObject(ctx context.Context, group string, version string, plural string, name string) ApiDeleteClusterCustomObjectRequest {
	return ApiDeleteClusterCustomObjectRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		plural: plural,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) DeleteClusterCustomObjectExecute(r ApiDeleteClusterCustomObjectRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.DeleteClusterCustomObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/{plural}/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCollectionClusterCustomObjectRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	plural string
	pretty *string
	labelSelector *string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	dryRun *string
	body *V1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteCollectionClusterCustomObjectRequest) Pretty(pretty string) ApiDeleteCollectionClusterCustomObjectRequest {
	r.pretty = &pretty
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiDeleteCollectionClusterCustomObjectRequest) LabelSelector(labelSelector string) ApiDeleteCollectionClusterCustomObjectRequest {
	r.labelSelector = &labelSelector
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteCollectionClusterCustomObjectRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteCollectionClusterCustomObjectRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteCollectionClusterCustomObjectRequest) OrphanDependents(orphanDependents bool) ApiDeleteCollectionClusterCustomObjectRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
func (r ApiDeleteCollectionClusterCustomObjectRequest) PropagationPolicy(propagationPolicy string) ApiDeleteCollectionClusterCustomObjectRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteCollectionClusterCustomObjectRequest) DryRun(dryRun string) ApiDeleteCollectionClusterCustomObjectRequest {
	r.dryRun = &dryRun
	return r
}

func (r ApiDeleteCollectionClusterCustomObjectRequest) Body(body V1DeleteOptions) ApiDeleteCollectionClusterCustomObjectRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCollectionClusterCustomObjectRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DeleteCollectionClusterCustomObjectExecute(r)
}

/*
DeleteCollectionClusterCustomObject Method for DeleteCollectionClusterCustomObject

Delete collection of cluster scoped custom objects

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group The custom resource's group name
 @param version The custom resource's version
 @param plural The custom resource's plural name. For TPRs this would be lowercase plural kind.
 @return ApiDeleteCollectionClusterCustomObjectRequest
*/
func (a *CustomObjectsApiService) DeleteCollectionClusterCustomObject(ctx context.Context, group string, version string, plural string) ApiDeleteCollectionClusterCustomObjectRequest {
	return ApiDeleteCollectionClusterCustomObjectRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		plural: plural,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) DeleteCollectionClusterCustomObjectExecute(r ApiDeleteCollectionClusterCustomObjectRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.DeleteCollectionClusterCustomObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/{plural}"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCollectionNamespacedCustomObjectRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	namespace string
	plural string
	pretty *string
	labelSelector *string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	dryRun *string
	fieldSelector *string
	body *V1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteCollectionNamespacedCustomObjectRequest) Pretty(pretty string) ApiDeleteCollectionNamespacedCustomObjectRequest {
	r.pretty = &pretty
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiDeleteCollectionNamespacedCustomObjectRequest) LabelSelector(labelSelector string) ApiDeleteCollectionNamespacedCustomObjectRequest {
	r.labelSelector = &labelSelector
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteCollectionNamespacedCustomObjectRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteCollectionNamespacedCustomObjectRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteCollectionNamespacedCustomObjectRequest) OrphanDependents(orphanDependents bool) ApiDeleteCollectionNamespacedCustomObjectRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
func (r ApiDeleteCollectionNamespacedCustomObjectRequest) PropagationPolicy(propagationPolicy string) ApiDeleteCollectionNamespacedCustomObjectRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteCollectionNamespacedCustomObjectRequest) DryRun(dryRun string) ApiDeleteCollectionNamespacedCustomObjectRequest {
	r.dryRun = &dryRun
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiDeleteCollectionNamespacedCustomObjectRequest) FieldSelector(fieldSelector string) ApiDeleteCollectionNamespacedCustomObjectRequest {
	r.fieldSelector = &fieldSelector
	return r
}

func (r ApiDeleteCollectionNamespacedCustomObjectRequest) Body(body V1DeleteOptions) ApiDeleteCollectionNamespacedCustomObjectRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCollectionNamespacedCustomObjectRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DeleteCollectionNamespacedCustomObjectExecute(r)
}

/*
DeleteCollectionNamespacedCustomObject Method for DeleteCollectionNamespacedCustomObject

Delete collection of namespace scoped custom objects

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group The custom resource's group name
 @param version The custom resource's version
 @param namespace The custom resource's namespace
 @param plural The custom resource's plural name. For TPRs this would be lowercase plural kind.
 @return ApiDeleteCollectionNamespacedCustomObjectRequest
*/
func (a *CustomObjectsApiService) DeleteCollectionNamespacedCustomObject(ctx context.Context, group string, version string, namespace string, plural string) ApiDeleteCollectionNamespacedCustomObjectRequest {
	return ApiDeleteCollectionNamespacedCustomObjectRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		namespace: namespace,
		plural: plural,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) DeleteCollectionNamespacedCustomObjectExecute(r ApiDeleteCollectionNamespacedCustomObjectRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.DeleteCollectionNamespacedCustomObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/namespaces/{namespace}/{plural}"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteNamespacedCustomObjectRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	namespace string
	plural string
	name string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	dryRun *string
	body *V1DeleteOptions
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteNamespacedCustomObjectRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteNamespacedCustomObjectRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteNamespacedCustomObjectRequest) OrphanDependents(orphanDependents bool) ApiDeleteNamespacedCustomObjectRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
func (r ApiDeleteNamespacedCustomObjectRequest) PropagationPolicy(propagationPolicy string) ApiDeleteNamespacedCustomObjectRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteNamespacedCustomObjectRequest) DryRun(dryRun string) ApiDeleteNamespacedCustomObjectRequest {
	r.dryRun = &dryRun
	return r
}

func (r ApiDeleteNamespacedCustomObjectRequest) Body(body V1DeleteOptions) ApiDeleteNamespacedCustomObjectRequest {
	r.body = &body
	return r
}

func (r ApiDeleteNamespacedCustomObjectRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DeleteNamespacedCustomObjectExecute(r)
}

/*
DeleteNamespacedCustomObject Method for DeleteNamespacedCustomObject

Deletes the specified namespace scoped custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group the custom resource's group
 @param version the custom resource's version
 @param namespace The custom resource's namespace
 @param plural the custom resource's plural name. For TPRs this would be lowercase plural kind.
 @param name the custom object's name
 @return ApiDeleteNamespacedCustomObjectRequest
*/
func (a *CustomObjectsApiService) DeleteNamespacedCustomObject(ctx context.Context, group string, version string, namespace string, plural string, name string) ApiDeleteNamespacedCustomObjectRequest {
	return ApiDeleteNamespacedCustomObjectRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		namespace: namespace,
		plural: plural,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) DeleteNamespacedCustomObjectExecute(r ApiDeleteNamespacedCustomObjectRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.DeleteNamespacedCustomObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetClusterCustomObjectRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	plural string
	name string
}

func (r ApiGetClusterCustomObjectRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetClusterCustomObjectExecute(r)
}

/*
GetClusterCustomObject Method for GetClusterCustomObject

Returns a cluster scoped custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group the custom resource's group
 @param version the custom resource's version
 @param plural the custom object's plural name. For TPRs this would be lowercase plural kind.
 @param name the custom object's name
 @return ApiGetClusterCustomObjectRequest
*/
func (a *CustomObjectsApiService) GetClusterCustomObject(ctx context.Context, group string, version string, plural string, name string) ApiGetClusterCustomObjectRequest {
	return ApiGetClusterCustomObjectRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		plural: plural,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) GetClusterCustomObjectExecute(r ApiGetClusterCustomObjectRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.GetClusterCustomObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/{plural}/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetClusterCustomObjectScaleRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	plural string
	name string
}

func (r ApiGetClusterCustomObjectScaleRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetClusterCustomObjectScaleExecute(r)
}

/*
GetClusterCustomObjectScale Method for GetClusterCustomObjectScale

read scale of the specified custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group the custom resource's group
 @param version the custom resource's version
 @param plural the custom resource's plural name. For TPRs this would be lowercase plural kind.
 @param name the custom object's name
 @return ApiGetClusterCustomObjectScaleRequest
*/
func (a *CustomObjectsApiService) GetClusterCustomObjectScale(ctx context.Context, group string, version string, plural string, name string) ApiGetClusterCustomObjectScaleRequest {
	return ApiGetClusterCustomObjectScaleRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		plural: plural,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) GetClusterCustomObjectScaleExecute(r ApiGetClusterCustomObjectScaleRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.GetClusterCustomObjectScale")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/{plural}/{name}/scale"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetClusterCustomObjectStatusRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	plural string
	name string
}

func (r ApiGetClusterCustomObjectStatusRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetClusterCustomObjectStatusExecute(r)
}

/*
GetClusterCustomObjectStatus Method for GetClusterCustomObjectStatus

read status of the specified cluster scoped custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group the custom resource's group
 @param version the custom resource's version
 @param plural the custom resource's plural name. For TPRs this would be lowercase plural kind.
 @param name the custom object's name
 @return ApiGetClusterCustomObjectStatusRequest
*/
func (a *CustomObjectsApiService) GetClusterCustomObjectStatus(ctx context.Context, group string, version string, plural string, name string) ApiGetClusterCustomObjectStatusRequest {
	return ApiGetClusterCustomObjectStatusRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		plural: plural,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) GetClusterCustomObjectStatusExecute(r ApiGetClusterCustomObjectStatusRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.GetClusterCustomObjectStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/{plural}/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCustomObjectsAPIResourcesRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
}

func (r ApiGetCustomObjectsAPIResourcesRequest) Execute() (*V1APIResourceList, *http.Response, error) {
	return r.ApiService.GetCustomObjectsAPIResourcesExecute(r)
}

/*
GetCustomObjectsAPIResources Method for GetCustomObjectsAPIResources

get available resources

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group The custom resource's group name
 @param version The custom resource's version
 @return ApiGetCustomObjectsAPIResourcesRequest
*/
func (a *CustomObjectsApiService) GetCustomObjectsAPIResources(ctx context.Context, group string, version string) ApiGetCustomObjectsAPIResourcesRequest {
	return ApiGetCustomObjectsAPIResourcesRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
	}
}

// Execute executes the request
//  @return V1APIResourceList
func (a *CustomObjectsApiService) GetCustomObjectsAPIResourcesExecute(r ApiGetCustomObjectsAPIResourcesRequest) (*V1APIResourceList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1APIResourceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.GetCustomObjectsAPIResources")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetNamespacedCustomObjectRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	namespace string
	plural string
	name string
}

func (r ApiGetNamespacedCustomObjectRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetNamespacedCustomObjectExecute(r)
}

/*
GetNamespacedCustomObject Method for GetNamespacedCustomObject

Returns a namespace scoped custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group the custom resource's group
 @param version the custom resource's version
 @param namespace The custom resource's namespace
 @param plural the custom resource's plural name. For TPRs this would be lowercase plural kind.
 @param name the custom object's name
 @return ApiGetNamespacedCustomObjectRequest
*/
func (a *CustomObjectsApiService) GetNamespacedCustomObject(ctx context.Context, group string, version string, namespace string, plural string, name string) ApiGetNamespacedCustomObjectRequest {
	return ApiGetNamespacedCustomObjectRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		namespace: namespace,
		plural: plural,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) GetNamespacedCustomObjectExecute(r ApiGetNamespacedCustomObjectRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.GetNamespacedCustomObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetNamespacedCustomObjectScaleRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	namespace string
	plural string
	name string
}

func (r ApiGetNamespacedCustomObjectScaleRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetNamespacedCustomObjectScaleExecute(r)
}

/*
GetNamespacedCustomObjectScale Method for GetNamespacedCustomObjectScale

read scale of the specified namespace scoped custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group the custom resource's group
 @param version the custom resource's version
 @param namespace The custom resource's namespace
 @param plural the custom resource's plural name. For TPRs this would be lowercase plural kind.
 @param name the custom object's name
 @return ApiGetNamespacedCustomObjectScaleRequest
*/
func (a *CustomObjectsApiService) GetNamespacedCustomObjectScale(ctx context.Context, group string, version string, namespace string, plural string, name string) ApiGetNamespacedCustomObjectScaleRequest {
	return ApiGetNamespacedCustomObjectScaleRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		namespace: namespace,
		plural: plural,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) GetNamespacedCustomObjectScaleExecute(r ApiGetNamespacedCustomObjectScaleRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.GetNamespacedCustomObjectScale")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetNamespacedCustomObjectStatusRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	namespace string
	plural string
	name string
}

func (r ApiGetNamespacedCustomObjectStatusRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetNamespacedCustomObjectStatusExecute(r)
}

/*
GetNamespacedCustomObjectStatus Method for GetNamespacedCustomObjectStatus

read status of the specified namespace scoped custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group the custom resource's group
 @param version the custom resource's version
 @param namespace The custom resource's namespace
 @param plural the custom resource's plural name. For TPRs this would be lowercase plural kind.
 @param name the custom object's name
 @return ApiGetNamespacedCustomObjectStatusRequest
*/
func (a *CustomObjectsApiService) GetNamespacedCustomObjectStatus(ctx context.Context, group string, version string, namespace string, plural string, name string) ApiGetNamespacedCustomObjectStatusRequest {
	return ApiGetNamespacedCustomObjectStatusRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		namespace: namespace,
		plural: plural,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) GetNamespacedCustomObjectStatusExecute(r ApiGetNamespacedCustomObjectStatusRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.GetNamespacedCustomObjectStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListClusterCustomObjectRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	plural string
	pretty *string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListClusterCustomObjectRequest) Pretty(pretty string) ApiListClusterCustomObjectRequest {
	r.pretty = &pretty
	return r
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.
func (r ApiListClusterCustomObjectRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListClusterCustomObjectRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListClusterCustomObjectRequest) Continue_(continue_ string) ApiListClusterCustomObjectRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListClusterCustomObjectRequest) FieldSelector(fieldSelector string) ApiListClusterCustomObjectRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListClusterCustomObjectRequest) LabelSelector(labelSelector string) ApiListClusterCustomObjectRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListClusterCustomObjectRequest) Limit(limit int32) ApiListClusterCustomObjectRequest {
	r.limit = &limit
	return r
}

// When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
func (r ApiListClusterCustomObjectRequest) ResourceVersion(resourceVersion string) ApiListClusterCustomObjectRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListClusterCustomObjectRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListClusterCustomObjectRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListClusterCustomObjectRequest) TimeoutSeconds(timeoutSeconds int32) ApiListClusterCustomObjectRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.
func (r ApiListClusterCustomObjectRequest) Watch(watch bool) ApiListClusterCustomObjectRequest {
	r.watch = &watch
	return r
}

func (r ApiListClusterCustomObjectRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ListClusterCustomObjectExecute(r)
}

/*
ListClusterCustomObject Method for ListClusterCustomObject

list or watch cluster scoped custom objects

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group The custom resource's group name
 @param version The custom resource's version
 @param plural The custom resource's plural name. For TPRs this would be lowercase plural kind.
 @return ApiListClusterCustomObjectRequest
*/
func (a *CustomObjectsApiService) ListClusterCustomObject(ctx context.Context, group string, version string, plural string) ApiListClusterCustomObjectRequest {
	return ApiListClusterCustomObjectRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		plural: plural,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) ListClusterCustomObjectExecute(r ApiListClusterCustomObjectRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.ListClusterCustomObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/{plural}"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCustomObjectForAllNamespacesRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	plural string
	pretty *string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListCustomObjectForAllNamespacesRequest) Pretty(pretty string) ApiListCustomObjectForAllNamespacesRequest {
	r.pretty = &pretty
	return r
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.
func (r ApiListCustomObjectForAllNamespacesRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListCustomObjectForAllNamespacesRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListCustomObjectForAllNamespacesRequest) Continue_(continue_ string) ApiListCustomObjectForAllNamespacesRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListCustomObjectForAllNamespacesRequest) FieldSelector(fieldSelector string) ApiListCustomObjectForAllNamespacesRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListCustomObjectForAllNamespacesRequest) LabelSelector(labelSelector string) ApiListCustomObjectForAllNamespacesRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListCustomObjectForAllNamespacesRequest) Limit(limit int32) ApiListCustomObjectForAllNamespacesRequest {
	r.limit = &limit
	return r
}

// When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
func (r ApiListCustomObjectForAllNamespacesRequest) ResourceVersion(resourceVersion string) ApiListCustomObjectForAllNamespacesRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCustomObjectForAllNamespacesRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListCustomObjectForAllNamespacesRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListCustomObjectForAllNamespacesRequest) TimeoutSeconds(timeoutSeconds int32) ApiListCustomObjectForAllNamespacesRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.
func (r ApiListCustomObjectForAllNamespacesRequest) Watch(watch bool) ApiListCustomObjectForAllNamespacesRequest {
	r.watch = &watch
	return r
}

func (r ApiListCustomObjectForAllNamespacesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ListCustomObjectForAllNamespacesExecute(r)
}

/*
ListCustomObjectForAllNamespaces Method for ListCustomObjectForAllNamespaces

list or watch namespace scoped custom objects

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group The custom resource's group name
 @param version The custom resource's version
 @param plural The custom resource's plural name. For TPRs this would be lowercase plural kind.
 @return ApiListCustomObjectForAllNamespacesRequest
*/
func (a *CustomObjectsApiService) ListCustomObjectForAllNamespaces(ctx context.Context, group string, version string, plural string) ApiListCustomObjectForAllNamespacesRequest {
	return ApiListCustomObjectForAllNamespacesRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		plural: plural,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) ListCustomObjectForAllNamespacesExecute(r ApiListCustomObjectForAllNamespacesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.ListCustomObjectForAllNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/{plural}#â"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListNamespacedCustomObjectRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	namespace string
	plural string
	pretty *string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListNamespacedCustomObjectRequest) Pretty(pretty string) ApiListNamespacedCustomObjectRequest {
	r.pretty = &pretty
	return r
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.
func (r ApiListNamespacedCustomObjectRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListNamespacedCustomObjectRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListNamespacedCustomObjectRequest) Continue_(continue_ string) ApiListNamespacedCustomObjectRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListNamespacedCustomObjectRequest) FieldSelector(fieldSelector string) ApiListNamespacedCustomObjectRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListNamespacedCustomObjectRequest) LabelSelector(labelSelector string) ApiListNamespacedCustomObjectRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListNamespacedCustomObjectRequest) Limit(limit int32) ApiListNamespacedCustomObjectRequest {
	r.limit = &limit
	return r
}

// When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
func (r ApiListNamespacedCustomObjectRequest) ResourceVersion(resourceVersion string) ApiListNamespacedCustomObjectRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListNamespacedCustomObjectRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListNamespacedCustomObjectRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListNamespacedCustomObjectRequest) TimeoutSeconds(timeoutSeconds int32) ApiListNamespacedCustomObjectRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.
func (r ApiListNamespacedCustomObjectRequest) Watch(watch bool) ApiListNamespacedCustomObjectRequest {
	r.watch = &watch
	return r
}

func (r ApiListNamespacedCustomObjectRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ListNamespacedCustomObjectExecute(r)
}

/*
ListNamespacedCustomObject Method for ListNamespacedCustomObject

list or watch namespace scoped custom objects

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group The custom resource's group name
 @param version The custom resource's version
 @param namespace The custom resource's namespace
 @param plural The custom resource's plural name. For TPRs this would be lowercase plural kind.
 @return ApiListNamespacedCustomObjectRequest
*/
func (a *CustomObjectsApiService) ListNamespacedCustomObject(ctx context.Context, group string, version string, namespace string, plural string) ApiListNamespacedCustomObjectRequest {
	return ApiListNamespacedCustomObjectRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		namespace: namespace,
		plural: plural,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) ListNamespacedCustomObjectExecute(r ApiListNamespacedCustomObjectRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.ListNamespacedCustomObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/namespaces/{namespace}/{plural}"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchClusterCustomObjectRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	plural string
	name string
	body *map[string]interface{}
	dryRun *string
	fieldManager *string
	fieldValidation *string
	force *bool
}

// The JSON schema of the Resource to patch.
func (r ApiPatchClusterCustomObjectRequest) Body(body map[string]interface{}) ApiPatchClusterCustomObjectRequest {
	r.body = &body
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchClusterCustomObjectRequest) DryRun(dryRun string) ApiPatchClusterCustomObjectRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchClusterCustomObjectRequest) FieldManager(fieldManager string) ApiPatchClusterCustomObjectRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered. (optional)
func (r ApiPatchClusterCustomObjectRequest) FieldValidation(fieldValidation string) ApiPatchClusterCustomObjectRequest {
	r.fieldValidation = &fieldValidation
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchClusterCustomObjectRequest) Force(force bool) ApiPatchClusterCustomObjectRequest {
	r.force = &force
	return r
}

func (r ApiPatchClusterCustomObjectRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.PatchClusterCustomObjectExecute(r)
}

/*
PatchClusterCustomObject Method for PatchClusterCustomObject

patch the specified cluster scoped custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group the custom resource's group
 @param version the custom resource's version
 @param plural the custom object's plural name. For TPRs this would be lowercase plural kind.
 @param name the custom object's name
 @return ApiPatchClusterCustomObjectRequest
*/
func (a *CustomObjectsApiService) PatchClusterCustomObject(ctx context.Context, group string, version string, plural string, name string) ApiPatchClusterCustomObjectRequest {
	return ApiPatchClusterCustomObjectRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		plural: plural,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) PatchClusterCustomObjectExecute(r ApiPatchClusterCustomObjectRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.PatchClusterCustomObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/{plural}/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.fieldValidation != nil {
		localVarQueryParams.Add("fieldValidation", parameterToString(*r.fieldValidation, ""))
	}
	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchClusterCustomObjectScaleRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	plural string
	name string
	body *map[string]interface{}
	dryRun *string
	fieldManager *string
	fieldValidation *string
	force *bool
}

func (r ApiPatchClusterCustomObjectScaleRequest) Body(body map[string]interface{}) ApiPatchClusterCustomObjectScaleRequest {
	r.body = &body
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchClusterCustomObjectScaleRequest) DryRun(dryRun string) ApiPatchClusterCustomObjectScaleRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchClusterCustomObjectScaleRequest) FieldManager(fieldManager string) ApiPatchClusterCustomObjectScaleRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered. (optional)
func (r ApiPatchClusterCustomObjectScaleRequest) FieldValidation(fieldValidation string) ApiPatchClusterCustomObjectScaleRequest {
	r.fieldValidation = &fieldValidation
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchClusterCustomObjectScaleRequest) Force(force bool) ApiPatchClusterCustomObjectScaleRequest {
	r.force = &force
	return r
}

func (r ApiPatchClusterCustomObjectScaleRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.PatchClusterCustomObjectScaleExecute(r)
}

/*
PatchClusterCustomObjectScale Method for PatchClusterCustomObjectScale

partially update scale of the specified cluster scoped custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group the custom resource's group
 @param version the custom resource's version
 @param plural the custom resource's plural name. For TPRs this would be lowercase plural kind.
 @param name the custom object's name
 @return ApiPatchClusterCustomObjectScaleRequest
*/
func (a *CustomObjectsApiService) PatchClusterCustomObjectScale(ctx context.Context, group string, version string, plural string, name string) ApiPatchClusterCustomObjectScaleRequest {
	return ApiPatchClusterCustomObjectScaleRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		plural: plural,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) PatchClusterCustomObjectScaleExecute(r ApiPatchClusterCustomObjectScaleRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.PatchClusterCustomObjectScale")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/{plural}/{name}/scale"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.fieldValidation != nil {
		localVarQueryParams.Add("fieldValidation", parameterToString(*r.fieldValidation, ""))
	}
	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchClusterCustomObjectStatusRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	plural string
	name string
	body *map[string]interface{}
	dryRun *string
	fieldManager *string
	fieldValidation *string
	force *bool
}

func (r ApiPatchClusterCustomObjectStatusRequest) Body(body map[string]interface{}) ApiPatchClusterCustomObjectStatusRequest {
	r.body = &body
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchClusterCustomObjectStatusRequest) DryRun(dryRun string) ApiPatchClusterCustomObjectStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchClusterCustomObjectStatusRequest) FieldManager(fieldManager string) ApiPatchClusterCustomObjectStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered. (optional)
func (r ApiPatchClusterCustomObjectStatusRequest) FieldValidation(fieldValidation string) ApiPatchClusterCustomObjectStatusRequest {
	r.fieldValidation = &fieldValidation
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchClusterCustomObjectStatusRequest) Force(force bool) ApiPatchClusterCustomObjectStatusRequest {
	r.force = &force
	return r
}

func (r ApiPatchClusterCustomObjectStatusRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.PatchClusterCustomObjectStatusExecute(r)
}

/*
PatchClusterCustomObjectStatus Method for PatchClusterCustomObjectStatus

partially update status of the specified cluster scoped custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group the custom resource's group
 @param version the custom resource's version
 @param plural the custom resource's plural name. For TPRs this would be lowercase plural kind.
 @param name the custom object's name
 @return ApiPatchClusterCustomObjectStatusRequest
*/
func (a *CustomObjectsApiService) PatchClusterCustomObjectStatus(ctx context.Context, group string, version string, plural string, name string) ApiPatchClusterCustomObjectStatusRequest {
	return ApiPatchClusterCustomObjectStatusRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		plural: plural,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) PatchClusterCustomObjectStatusExecute(r ApiPatchClusterCustomObjectStatusRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.PatchClusterCustomObjectStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/{plural}/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.fieldValidation != nil {
		localVarQueryParams.Add("fieldValidation", parameterToString(*r.fieldValidation, ""))
	}
	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchNamespacedCustomObjectRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	namespace string
	plural string
	name string
	body *map[string]interface{}
	dryRun *string
	fieldManager *string
	fieldValidation *string
	force *bool
}

// The JSON schema of the Resource to patch.
func (r ApiPatchNamespacedCustomObjectRequest) Body(body map[string]interface{}) ApiPatchNamespacedCustomObjectRequest {
	r.body = &body
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchNamespacedCustomObjectRequest) DryRun(dryRun string) ApiPatchNamespacedCustomObjectRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchNamespacedCustomObjectRequest) FieldManager(fieldManager string) ApiPatchNamespacedCustomObjectRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered. (optional)
func (r ApiPatchNamespacedCustomObjectRequest) FieldValidation(fieldValidation string) ApiPatchNamespacedCustomObjectRequest {
	r.fieldValidation = &fieldValidation
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchNamespacedCustomObjectRequest) Force(force bool) ApiPatchNamespacedCustomObjectRequest {
	r.force = &force
	return r
}

func (r ApiPatchNamespacedCustomObjectRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.PatchNamespacedCustomObjectExecute(r)
}

/*
PatchNamespacedCustomObject Method for PatchNamespacedCustomObject

patch the specified namespace scoped custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group the custom resource's group
 @param version the custom resource's version
 @param namespace The custom resource's namespace
 @param plural the custom resource's plural name. For TPRs this would be lowercase plural kind.
 @param name the custom object's name
 @return ApiPatchNamespacedCustomObjectRequest
*/
func (a *CustomObjectsApiService) PatchNamespacedCustomObject(ctx context.Context, group string, version string, namespace string, plural string, name string) ApiPatchNamespacedCustomObjectRequest {
	return ApiPatchNamespacedCustomObjectRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		namespace: namespace,
		plural: plural,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) PatchNamespacedCustomObjectExecute(r ApiPatchNamespacedCustomObjectRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.PatchNamespacedCustomObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.fieldValidation != nil {
		localVarQueryParams.Add("fieldValidation", parameterToString(*r.fieldValidation, ""))
	}
	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchNamespacedCustomObjectScaleRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	namespace string
	plural string
	name string
	body *map[string]interface{}
	dryRun *string
	fieldManager *string
	fieldValidation *string
	force *bool
}

func (r ApiPatchNamespacedCustomObjectScaleRequest) Body(body map[string]interface{}) ApiPatchNamespacedCustomObjectScaleRequest {
	r.body = &body
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchNamespacedCustomObjectScaleRequest) DryRun(dryRun string) ApiPatchNamespacedCustomObjectScaleRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchNamespacedCustomObjectScaleRequest) FieldManager(fieldManager string) ApiPatchNamespacedCustomObjectScaleRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered. (optional)
func (r ApiPatchNamespacedCustomObjectScaleRequest) FieldValidation(fieldValidation string) ApiPatchNamespacedCustomObjectScaleRequest {
	r.fieldValidation = &fieldValidation
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchNamespacedCustomObjectScaleRequest) Force(force bool) ApiPatchNamespacedCustomObjectScaleRequest {
	r.force = &force
	return r
}

func (r ApiPatchNamespacedCustomObjectScaleRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.PatchNamespacedCustomObjectScaleExecute(r)
}

/*
PatchNamespacedCustomObjectScale Method for PatchNamespacedCustomObjectScale

partially update scale of the specified namespace scoped custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group the custom resource's group
 @param version the custom resource's version
 @param namespace The custom resource's namespace
 @param plural the custom resource's plural name. For TPRs this would be lowercase plural kind.
 @param name the custom object's name
 @return ApiPatchNamespacedCustomObjectScaleRequest
*/
func (a *CustomObjectsApiService) PatchNamespacedCustomObjectScale(ctx context.Context, group string, version string, namespace string, plural string, name string) ApiPatchNamespacedCustomObjectScaleRequest {
	return ApiPatchNamespacedCustomObjectScaleRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		namespace: namespace,
		plural: plural,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) PatchNamespacedCustomObjectScaleExecute(r ApiPatchNamespacedCustomObjectScaleRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.PatchNamespacedCustomObjectScale")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.fieldValidation != nil {
		localVarQueryParams.Add("fieldValidation", parameterToString(*r.fieldValidation, ""))
	}
	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchNamespacedCustomObjectStatusRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	namespace string
	plural string
	name string
	body *map[string]interface{}
	dryRun *string
	fieldManager *string
	fieldValidation *string
	force *bool
}

func (r ApiPatchNamespacedCustomObjectStatusRequest) Body(body map[string]interface{}) ApiPatchNamespacedCustomObjectStatusRequest {
	r.body = &body
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchNamespacedCustomObjectStatusRequest) DryRun(dryRun string) ApiPatchNamespacedCustomObjectStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchNamespacedCustomObjectStatusRequest) FieldManager(fieldManager string) ApiPatchNamespacedCustomObjectStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered. (optional)
func (r ApiPatchNamespacedCustomObjectStatusRequest) FieldValidation(fieldValidation string) ApiPatchNamespacedCustomObjectStatusRequest {
	r.fieldValidation = &fieldValidation
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchNamespacedCustomObjectStatusRequest) Force(force bool) ApiPatchNamespacedCustomObjectStatusRequest {
	r.force = &force
	return r
}

func (r ApiPatchNamespacedCustomObjectStatusRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.PatchNamespacedCustomObjectStatusExecute(r)
}

/*
PatchNamespacedCustomObjectStatus Method for PatchNamespacedCustomObjectStatus

partially update status of the specified namespace scoped custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group the custom resource's group
 @param version the custom resource's version
 @param namespace The custom resource's namespace
 @param plural the custom resource's plural name. For TPRs this would be lowercase plural kind.
 @param name the custom object's name
 @return ApiPatchNamespacedCustomObjectStatusRequest
*/
func (a *CustomObjectsApiService) PatchNamespacedCustomObjectStatus(ctx context.Context, group string, version string, namespace string, plural string, name string) ApiPatchNamespacedCustomObjectStatusRequest {
	return ApiPatchNamespacedCustomObjectStatusRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		namespace: namespace,
		plural: plural,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) PatchNamespacedCustomObjectStatusExecute(r ApiPatchNamespacedCustomObjectStatusRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.PatchNamespacedCustomObjectStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.fieldValidation != nil {
		localVarQueryParams.Add("fieldValidation", parameterToString(*r.fieldValidation, ""))
	}
	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceClusterCustomObjectRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	plural string
	name string
	body *map[string]interface{}
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

// The JSON schema of the Resource to replace.
func (r ApiReplaceClusterCustomObjectRequest) Body(body map[string]interface{}) ApiReplaceClusterCustomObjectRequest {
	r.body = &body
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceClusterCustomObjectRequest) DryRun(dryRun string) ApiReplaceClusterCustomObjectRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceClusterCustomObjectRequest) FieldManager(fieldManager string) ApiReplaceClusterCustomObjectRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered. (optional)
func (r ApiReplaceClusterCustomObjectRequest) FieldValidation(fieldValidation string) ApiReplaceClusterCustomObjectRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiReplaceClusterCustomObjectRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ReplaceClusterCustomObjectExecute(r)
}

/*
ReplaceClusterCustomObject Method for ReplaceClusterCustomObject

replace the specified cluster scoped custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group the custom resource's group
 @param version the custom resource's version
 @param plural the custom object's plural name. For TPRs this would be lowercase plural kind.
 @param name the custom object's name
 @return ApiReplaceClusterCustomObjectRequest
*/
func (a *CustomObjectsApiService) ReplaceClusterCustomObject(ctx context.Context, group string, version string, plural string, name string) ApiReplaceClusterCustomObjectRequest {
	return ApiReplaceClusterCustomObjectRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		plural: plural,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) ReplaceClusterCustomObjectExecute(r ApiReplaceClusterCustomObjectRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.ReplaceClusterCustomObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/{plural}/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.fieldValidation != nil {
		localVarQueryParams.Add("fieldValidation", parameterToString(*r.fieldValidation, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceClusterCustomObjectScaleRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	plural string
	name string
	body *map[string]interface{}
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

func (r ApiReplaceClusterCustomObjectScaleRequest) Body(body map[string]interface{}) ApiReplaceClusterCustomObjectScaleRequest {
	r.body = &body
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceClusterCustomObjectScaleRequest) DryRun(dryRun string) ApiReplaceClusterCustomObjectScaleRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceClusterCustomObjectScaleRequest) FieldManager(fieldManager string) ApiReplaceClusterCustomObjectScaleRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered. (optional)
func (r ApiReplaceClusterCustomObjectScaleRequest) FieldValidation(fieldValidation string) ApiReplaceClusterCustomObjectScaleRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiReplaceClusterCustomObjectScaleRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ReplaceClusterCustomObjectScaleExecute(r)
}

/*
ReplaceClusterCustomObjectScale Method for ReplaceClusterCustomObjectScale

replace scale of the specified cluster scoped custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group the custom resource's group
 @param version the custom resource's version
 @param plural the custom resource's plural name. For TPRs this would be lowercase plural kind.
 @param name the custom object's name
 @return ApiReplaceClusterCustomObjectScaleRequest
*/
func (a *CustomObjectsApiService) ReplaceClusterCustomObjectScale(ctx context.Context, group string, version string, plural string, name string) ApiReplaceClusterCustomObjectScaleRequest {
	return ApiReplaceClusterCustomObjectScaleRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		plural: plural,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) ReplaceClusterCustomObjectScaleExecute(r ApiReplaceClusterCustomObjectScaleRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.ReplaceClusterCustomObjectScale")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/{plural}/{name}/scale"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.fieldValidation != nil {
		localVarQueryParams.Add("fieldValidation", parameterToString(*r.fieldValidation, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceClusterCustomObjectStatusRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	plural string
	name string
	body *map[string]interface{}
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

func (r ApiReplaceClusterCustomObjectStatusRequest) Body(body map[string]interface{}) ApiReplaceClusterCustomObjectStatusRequest {
	r.body = &body
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceClusterCustomObjectStatusRequest) DryRun(dryRun string) ApiReplaceClusterCustomObjectStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceClusterCustomObjectStatusRequest) FieldManager(fieldManager string) ApiReplaceClusterCustomObjectStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered. (optional)
func (r ApiReplaceClusterCustomObjectStatusRequest) FieldValidation(fieldValidation string) ApiReplaceClusterCustomObjectStatusRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiReplaceClusterCustomObjectStatusRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ReplaceClusterCustomObjectStatusExecute(r)
}

/*
ReplaceClusterCustomObjectStatus Method for ReplaceClusterCustomObjectStatus

replace status of the cluster scoped specified custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group the custom resource's group
 @param version the custom resource's version
 @param plural the custom resource's plural name. For TPRs this would be lowercase plural kind.
 @param name the custom object's name
 @return ApiReplaceClusterCustomObjectStatusRequest
*/
func (a *CustomObjectsApiService) ReplaceClusterCustomObjectStatus(ctx context.Context, group string, version string, plural string, name string) ApiReplaceClusterCustomObjectStatusRequest {
	return ApiReplaceClusterCustomObjectStatusRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		plural: plural,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) ReplaceClusterCustomObjectStatusExecute(r ApiReplaceClusterCustomObjectStatusRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.ReplaceClusterCustomObjectStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/{plural}/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.fieldValidation != nil {
		localVarQueryParams.Add("fieldValidation", parameterToString(*r.fieldValidation, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceNamespacedCustomObjectRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	namespace string
	plural string
	name string
	body *map[string]interface{}
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

// The JSON schema of the Resource to replace.
func (r ApiReplaceNamespacedCustomObjectRequest) Body(body map[string]interface{}) ApiReplaceNamespacedCustomObjectRequest {
	r.body = &body
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceNamespacedCustomObjectRequest) DryRun(dryRun string) ApiReplaceNamespacedCustomObjectRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceNamespacedCustomObjectRequest) FieldManager(fieldManager string) ApiReplaceNamespacedCustomObjectRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered. (optional)
func (r ApiReplaceNamespacedCustomObjectRequest) FieldValidation(fieldValidation string) ApiReplaceNamespacedCustomObjectRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiReplaceNamespacedCustomObjectRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ReplaceNamespacedCustomObjectExecute(r)
}

/*
ReplaceNamespacedCustomObject Method for ReplaceNamespacedCustomObject

replace the specified namespace scoped custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group the custom resource's group
 @param version the custom resource's version
 @param namespace The custom resource's namespace
 @param plural the custom resource's plural name. For TPRs this would be lowercase plural kind.
 @param name the custom object's name
 @return ApiReplaceNamespacedCustomObjectRequest
*/
func (a *CustomObjectsApiService) ReplaceNamespacedCustomObject(ctx context.Context, group string, version string, namespace string, plural string, name string) ApiReplaceNamespacedCustomObjectRequest {
	return ApiReplaceNamespacedCustomObjectRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		namespace: namespace,
		plural: plural,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) ReplaceNamespacedCustomObjectExecute(r ApiReplaceNamespacedCustomObjectRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.ReplaceNamespacedCustomObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.fieldValidation != nil {
		localVarQueryParams.Add("fieldValidation", parameterToString(*r.fieldValidation, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceNamespacedCustomObjectScaleRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	namespace string
	plural string
	name string
	body *map[string]interface{}
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

func (r ApiReplaceNamespacedCustomObjectScaleRequest) Body(body map[string]interface{}) ApiReplaceNamespacedCustomObjectScaleRequest {
	r.body = &body
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceNamespacedCustomObjectScaleRequest) DryRun(dryRun string) ApiReplaceNamespacedCustomObjectScaleRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceNamespacedCustomObjectScaleRequest) FieldManager(fieldManager string) ApiReplaceNamespacedCustomObjectScaleRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered. (optional)
func (r ApiReplaceNamespacedCustomObjectScaleRequest) FieldValidation(fieldValidation string) ApiReplaceNamespacedCustomObjectScaleRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiReplaceNamespacedCustomObjectScaleRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ReplaceNamespacedCustomObjectScaleExecute(r)
}

/*
ReplaceNamespacedCustomObjectScale Method for ReplaceNamespacedCustomObjectScale

replace scale of the specified namespace scoped custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group the custom resource's group
 @param version the custom resource's version
 @param namespace The custom resource's namespace
 @param plural the custom resource's plural name. For TPRs this would be lowercase plural kind.
 @param name the custom object's name
 @return ApiReplaceNamespacedCustomObjectScaleRequest
*/
func (a *CustomObjectsApiService) ReplaceNamespacedCustomObjectScale(ctx context.Context, group string, version string, namespace string, plural string, name string) ApiReplaceNamespacedCustomObjectScaleRequest {
	return ApiReplaceNamespacedCustomObjectScaleRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		namespace: namespace,
		plural: plural,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) ReplaceNamespacedCustomObjectScaleExecute(r ApiReplaceNamespacedCustomObjectScaleRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.ReplaceNamespacedCustomObjectScale")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.fieldValidation != nil {
		localVarQueryParams.Add("fieldValidation", parameterToString(*r.fieldValidation, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceNamespacedCustomObjectStatusRequest struct {
	ctx context.Context
	ApiService *CustomObjectsApiService
	group string
	version string
	namespace string
	plural string
	name string
	body *map[string]interface{}
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

func (r ApiReplaceNamespacedCustomObjectStatusRequest) Body(body map[string]interface{}) ApiReplaceNamespacedCustomObjectStatusRequest {
	r.body = &body
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceNamespacedCustomObjectStatusRequest) DryRun(dryRun string) ApiReplaceNamespacedCustomObjectStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceNamespacedCustomObjectStatusRequest) FieldManager(fieldManager string) ApiReplaceNamespacedCustomObjectStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered. (optional)
func (r ApiReplaceNamespacedCustomObjectStatusRequest) FieldValidation(fieldValidation string) ApiReplaceNamespacedCustomObjectStatusRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiReplaceNamespacedCustomObjectStatusRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ReplaceNamespacedCustomObjectStatusExecute(r)
}

/*
ReplaceNamespacedCustomObjectStatus Method for ReplaceNamespacedCustomObjectStatus

replace status of the specified namespace scoped custom object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param group the custom resource's group
 @param version the custom resource's version
 @param namespace The custom resource's namespace
 @param plural the custom resource's plural name. For TPRs this would be lowercase plural kind.
 @param name the custom object's name
 @return ApiReplaceNamespacedCustomObjectStatusRequest
*/
func (a *CustomObjectsApiService) ReplaceNamespacedCustomObjectStatus(ctx context.Context, group string, version string, namespace string, plural string, name string) ApiReplaceNamespacedCustomObjectStatusRequest {
	return ApiReplaceNamespacedCustomObjectStatusRequest{
		ApiService: a,
		ctx: ctx,
		group: group,
		version: version,
		namespace: namespace,
		plural: plural,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CustomObjectsApiService) ReplaceNamespacedCustomObjectStatusExecute(r ApiReplaceNamespacedCustomObjectStatusRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomObjectsApiService.ReplaceNamespacedCustomObjectStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"group"+"}", url.PathEscape(parameterToString(r.group, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"plural"+"}", url.PathEscape(parameterToString(r.plural, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.fieldValidation != nil {
		localVarQueryParams.Add("fieldValidation", parameterToString(*r.fieldValidation, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
