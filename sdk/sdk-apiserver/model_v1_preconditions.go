//
// Copyright Â© 2023-2024 StreamNative Inc.
//

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// V1Preconditions Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
type V1Preconditions struct {
	// Specifies the target ResourceVersion
	ResourceVersion *string `json:"resourceVersion,omitempty"`
	// Specifies the target UID.
	Uid *string `json:"uid,omitempty"`
}

// NewV1Preconditions instantiates a new V1Preconditions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Preconditions() *V1Preconditions {
	this := V1Preconditions{}
	return &this
}

// NewV1PreconditionsWithDefaults instantiates a new V1Preconditions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1PreconditionsWithDefaults() *V1Preconditions {
	this := V1Preconditions{}
	return &this
}

// GetResourceVersion returns the ResourceVersion field value if set, zero value otherwise.
func (o *V1Preconditions) GetResourceVersion() string {
	if o == nil || o.ResourceVersion == nil {
		var ret string
		return ret
	}
	return *o.ResourceVersion
}

// GetResourceVersionOk returns a tuple with the ResourceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Preconditions) GetResourceVersionOk() (*string, bool) {
	if o == nil || o.ResourceVersion == nil {
		return nil, false
	}
	return o.ResourceVersion, true
}

// HasResourceVersion returns a boolean if a field has been set.
func (o *V1Preconditions) HasResourceVersion() bool {
	if o != nil && o.ResourceVersion != nil {
		return true
	}

	return false
}

// SetResourceVersion gets a reference to the given string and assigns it to the ResourceVersion field.
func (o *V1Preconditions) SetResourceVersion(v string) {
	o.ResourceVersion = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *V1Preconditions) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Preconditions) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *V1Preconditions) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *V1Preconditions) SetUid(v string) {
	o.Uid = &v
}

func (o V1Preconditions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ResourceVersion != nil {
		toSerialize["resourceVersion"] = o.ResourceVersion
	}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	return json.Marshal(toSerialize)
}

type NullableV1Preconditions struct {
	value *V1Preconditions
	isSet bool
}

func (v NullableV1Preconditions) Get() *V1Preconditions {
	return v.value
}

func (v *NullableV1Preconditions) Set(val *V1Preconditions) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Preconditions) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Preconditions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Preconditions(val *V1Preconditions) *NullableV1Preconditions {
	return &NullableV1Preconditions{value: val, isSet: true}
}

func (v NullableV1Preconditions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Preconditions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


