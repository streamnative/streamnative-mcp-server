// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// V1APIGroup APIGroup contains the name, the supported versions, and the preferred version of a group.
type V1APIGroup struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// name is the name of the group.
	Name string `json:"name"`
	PreferredVersion *V1GroupVersionForDiscovery `json:"preferredVersion,omitempty"`
	// a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
	ServerAddressByClientCIDRs []V1ServerAddressByClientCIDR `json:"serverAddressByClientCIDRs,omitempty"`
	// versions are the versions supported in this group.
	Versions []V1GroupVersionForDiscovery `json:"versions"`
}

// NewV1APIGroup instantiates a new V1APIGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1APIGroup(name string, versions []V1GroupVersionForDiscovery) *V1APIGroup {
	this := V1APIGroup{}
	this.Name = name
	this.Versions = versions
	return &this
}

// NewV1APIGroupWithDefaults instantiates a new V1APIGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1APIGroupWithDefaults() *V1APIGroup {
	this := V1APIGroup{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *V1APIGroup) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1APIGroup) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *V1APIGroup) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *V1APIGroup) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *V1APIGroup) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1APIGroup) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *V1APIGroup) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *V1APIGroup) SetKind(v string) {
	o.Kind = &v
}

// GetName returns the Name field value
func (o *V1APIGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *V1APIGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *V1APIGroup) SetName(v string) {
	o.Name = v
}

// GetPreferredVersion returns the PreferredVersion field value if set, zero value otherwise.
func (o *V1APIGroup) GetPreferredVersion() V1GroupVersionForDiscovery {
	if o == nil || o.PreferredVersion == nil {
		var ret V1GroupVersionForDiscovery
		return ret
	}
	return *o.PreferredVersion
}

// GetPreferredVersionOk returns a tuple with the PreferredVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1APIGroup) GetPreferredVersionOk() (*V1GroupVersionForDiscovery, bool) {
	if o == nil || o.PreferredVersion == nil {
		return nil, false
	}
	return o.PreferredVersion, true
}

// HasPreferredVersion returns a boolean if a field has been set.
func (o *V1APIGroup) HasPreferredVersion() bool {
	if o != nil && o.PreferredVersion != nil {
		return true
	}

	return false
}

// SetPreferredVersion gets a reference to the given V1GroupVersionForDiscovery and assigns it to the PreferredVersion field.
func (o *V1APIGroup) SetPreferredVersion(v V1GroupVersionForDiscovery) {
	o.PreferredVersion = &v
}

// GetServerAddressByClientCIDRs returns the ServerAddressByClientCIDRs field value if set, zero value otherwise.
func (o *V1APIGroup) GetServerAddressByClientCIDRs() []V1ServerAddressByClientCIDR {
	if o == nil || o.ServerAddressByClientCIDRs == nil {
		var ret []V1ServerAddressByClientCIDR
		return ret
	}
	return o.ServerAddressByClientCIDRs
}

// GetServerAddressByClientCIDRsOk returns a tuple with the ServerAddressByClientCIDRs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1APIGroup) GetServerAddressByClientCIDRsOk() ([]V1ServerAddressByClientCIDR, bool) {
	if o == nil || o.ServerAddressByClientCIDRs == nil {
		return nil, false
	}
	return o.ServerAddressByClientCIDRs, true
}

// HasServerAddressByClientCIDRs returns a boolean if a field has been set.
func (o *V1APIGroup) HasServerAddressByClientCIDRs() bool {
	if o != nil && o.ServerAddressByClientCIDRs != nil {
		return true
	}

	return false
}

// SetServerAddressByClientCIDRs gets a reference to the given []V1ServerAddressByClientCIDR and assigns it to the ServerAddressByClientCIDRs field.
func (o *V1APIGroup) SetServerAddressByClientCIDRs(v []V1ServerAddressByClientCIDR) {
	o.ServerAddressByClientCIDRs = v
}

// GetVersions returns the Versions field value
func (o *V1APIGroup) GetVersions() []V1GroupVersionForDiscovery {
	if o == nil {
		var ret []V1GroupVersionForDiscovery
		return ret
	}

	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value
// and a boolean to check if the value has been set.
func (o *V1APIGroup) GetVersionsOk() ([]V1GroupVersionForDiscovery, bool) {
	if o == nil {
		return nil, false
	}
	return o.Versions, true
}

// SetVersions sets field value
func (o *V1APIGroup) SetVersions(v []V1GroupVersionForDiscovery) {
	o.Versions = v
}

func (o V1APIGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.PreferredVersion != nil {
		toSerialize["preferredVersion"] = o.PreferredVersion
	}
	if o.ServerAddressByClientCIDRs != nil {
		toSerialize["serverAddressByClientCIDRs"] = o.ServerAddressByClientCIDRs
	}
	if true {
		toSerialize["versions"] = o.Versions
	}
	return json.Marshal(toSerialize)
}

type NullableV1APIGroup struct {
	value *V1APIGroup
	isSet bool
}

func (v NullableV1APIGroup) Get() *V1APIGroup {
	return v.value
}

func (v *NullableV1APIGroup) Set(val *V1APIGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableV1APIGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableV1APIGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1APIGroup(val *V1APIGroup) *NullableV1APIGroup {
	return &NullableV1APIGroup{value: val, isSet: true}
}

func (v NullableV1APIGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1APIGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


