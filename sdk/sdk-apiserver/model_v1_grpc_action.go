// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// V1GRPCAction struct for V1GRPCAction
type V1GRPCAction struct {
	// Port number of the gRPC service. Number must be in the range 1 to 65535.
	Port int32 `json:"port"`
	// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).  If this is not specified, the default behavior is defined by gRPC.
	Service *string `json:"service,omitempty"`
}

// NewV1GRPCAction instantiates a new V1GRPCAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1GRPCAction(port int32) *V1GRPCAction {
	this := V1GRPCAction{}
	this.Port = port
	return &this
}

// NewV1GRPCActionWithDefaults instantiates a new V1GRPCAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1GRPCActionWithDefaults() *V1GRPCAction {
	this := V1GRPCAction{}
	return &this
}

// GetPort returns the Port field value
func (o *V1GRPCAction) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *V1GRPCAction) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *V1GRPCAction) SetPort(v int32) {
	o.Port = v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *V1GRPCAction) GetService() string {
	if o == nil || o.Service == nil {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GRPCAction) GetServiceOk() (*string, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *V1GRPCAction) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *V1GRPCAction) SetService(v string) {
	o.Service = &v
}

func (o V1GRPCAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["port"] = o.Port
	}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	return json.Marshal(toSerialize)
}

type NullableV1GRPCAction struct {
	value *V1GRPCAction
	isSet bool
}

func (v NullableV1GRPCAction) Get() *V1GRPCAction {
	return v.value
}

func (v *NullableV1GRPCAction) Set(val *V1GRPCAction) {
	v.value = val
	v.isSet = true
}

func (v NullableV1GRPCAction) IsSet() bool {
	return v.isSet
}

func (v *NullableV1GRPCAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1GRPCAction(val *V1GRPCAction) *NullableV1GRPCAction {
	return &NullableV1GRPCAction{value: val, isSet: true}
}

func (v NullableV1GRPCAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1GRPCAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


