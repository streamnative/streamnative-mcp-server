//
// Copyright Â© 2023-2024 StreamNative Inc.
//

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// V1WatchEvent Event represents a single event to a watched resource.
type V1WatchEvent struct {
	// Object is:  * If Type is Added or Modified: the new state of the object.  * If Type is Deleted: the state of the object immediately before deletion.  * If Type is Error: *Status is recommended; other types may make sense    depending on context.
	Object map[string]interface{} `json:"object"`
	Type string `json:"type"`
}

// NewV1WatchEvent instantiates a new V1WatchEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1WatchEvent(object map[string]interface{}, type_ string) *V1WatchEvent {
	this := V1WatchEvent{}
	this.Object = object
	this.Type = type_
	return &this
}

// NewV1WatchEventWithDefaults instantiates a new V1WatchEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1WatchEventWithDefaults() *V1WatchEvent {
	this := V1WatchEvent{}
	return &this
}

// GetObject returns the Object field value
func (o *V1WatchEvent) GetObject() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *V1WatchEvent) GetObjectOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Object, true
}

// SetObject sets field value
func (o *V1WatchEvent) SetObject(v map[string]interface{}) {
	o.Object = v
}

// GetType returns the Type field value
func (o *V1WatchEvent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *V1WatchEvent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *V1WatchEvent) SetType(v string) {
	o.Type = v
}

func (o V1WatchEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["object"] = o.Object
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableV1WatchEvent struct {
	value *V1WatchEvent
	isSet bool
}

func (v NullableV1WatchEvent) Get() *V1WatchEvent {
	return v.value
}

func (v *NullableV1WatchEvent) Set(val *V1WatchEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableV1WatchEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableV1WatchEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1WatchEvent(val *V1WatchEvent) *NullableV1WatchEvent {
	return &NullableV1WatchEvent{value: val, isSet: true}
}

func (v NullableV1WatchEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1WatchEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


