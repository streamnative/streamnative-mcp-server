//
// Copyright Â© 2023-2024 StreamNative Inc.
//

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource Represents resource spec for bookie nodes
type ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource struct {
	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.  The serialization format is:  <quantity>        ::= <signedNumber><suffix>   (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.) <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei   (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html) <decimalSI>       ::= m | \"\" | k | M | G | T | P | E   (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.) <decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>  No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.  When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.  Before serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:   a. No precision is lost   b. No fractional digits will be emitted   c. The exponent (or suffix) is as large as possible. The sign will be omitted unless the number is negative.  Examples:   1.5 will be serialized as \"1500m\"   1.5Gi will be serialized as \"1536Mi\"  Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.  Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)  This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	Cpu string `json:"cpu"`
	// Percentage of direct memory from overall memory. Set to 0 to use default value.
	DirectPercentage *int32 `json:"directPercentage,omitempty"`
	// Percentage of heap memory from overall memory. Set to 0 to use default value.
	HeapPercentage *int32 `json:"heapPercentage,omitempty"`
	// JournalDisk size. Set to zero equivalent to use default value
	JournalDisk *string `json:"journalDisk,omitempty"`
	// LedgerDisk size. Set to zero equivalent to use default value
	LedgerDisk *string `json:"ledgerDisk,omitempty"`
	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.  The serialization format is:  <quantity>        ::= <signedNumber><suffix>   (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.) <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei   (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html) <decimalSI>       ::= m | \"\" | k | M | G | T | P | E   (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.) <decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>  No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.  When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.  Before serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:   a. No precision is lost   b. No fractional digits will be emitted   c. The exponent (or suffix) is as large as possible. The sign will be omitted unless the number is negative.  Examples:   1.5 will be serialized as \"1500m\"   1.5Gi will be serialized as \"1536Mi\"  Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.  Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)  This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	Memory string `json:"memory"`
}

// NewComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource instantiates a new ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource(cpu string, memory string) *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource {
	this := ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource{}
	this.Cpu = cpu
	this.Memory = memory
	return &this
}

// NewComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResourceWithDefaults instantiates a new ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResourceWithDefaults() *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource {
	this := ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource{}
	return &this
}

// GetCpu returns the Cpu field value
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) GetCpu() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) GetCpuOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cpu, true
}

// SetCpu sets field value
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) SetCpu(v string) {
	o.Cpu = v
}

// GetDirectPercentage returns the DirectPercentage field value if set, zero value otherwise.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) GetDirectPercentage() int32 {
	if o == nil || o.DirectPercentage == nil {
		var ret int32
		return ret
	}
	return *o.DirectPercentage
}

// GetDirectPercentageOk returns a tuple with the DirectPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) GetDirectPercentageOk() (*int32, bool) {
	if o == nil || o.DirectPercentage == nil {
		return nil, false
	}
	return o.DirectPercentage, true
}

// HasDirectPercentage returns a boolean if a field has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) HasDirectPercentage() bool {
	if o != nil && o.DirectPercentage != nil {
		return true
	}

	return false
}

// SetDirectPercentage gets a reference to the given int32 and assigns it to the DirectPercentage field.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) SetDirectPercentage(v int32) {
	o.DirectPercentage = &v
}

// GetHeapPercentage returns the HeapPercentage field value if set, zero value otherwise.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) GetHeapPercentage() int32 {
	if o == nil || o.HeapPercentage == nil {
		var ret int32
		return ret
	}
	return *o.HeapPercentage
}

// GetHeapPercentageOk returns a tuple with the HeapPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) GetHeapPercentageOk() (*int32, bool) {
	if o == nil || o.HeapPercentage == nil {
		return nil, false
	}
	return o.HeapPercentage, true
}

// HasHeapPercentage returns a boolean if a field has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) HasHeapPercentage() bool {
	if o != nil && o.HeapPercentage != nil {
		return true
	}

	return false
}

// SetHeapPercentage gets a reference to the given int32 and assigns it to the HeapPercentage field.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) SetHeapPercentage(v int32) {
	o.HeapPercentage = &v
}

// GetJournalDisk returns the JournalDisk field value if set, zero value otherwise.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) GetJournalDisk() string {
	if o == nil || o.JournalDisk == nil {
		var ret string
		return ret
	}
	return *o.JournalDisk
}

// GetJournalDiskOk returns a tuple with the JournalDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) GetJournalDiskOk() (*string, bool) {
	if o == nil || o.JournalDisk == nil {
		return nil, false
	}
	return o.JournalDisk, true
}

// HasJournalDisk returns a boolean if a field has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) HasJournalDisk() bool {
	if o != nil && o.JournalDisk != nil {
		return true
	}

	return false
}

// SetJournalDisk gets a reference to the given string and assigns it to the JournalDisk field.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) SetJournalDisk(v string) {
	o.JournalDisk = &v
}

// GetLedgerDisk returns the LedgerDisk field value if set, zero value otherwise.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) GetLedgerDisk() string {
	if o == nil || o.LedgerDisk == nil {
		var ret string
		return ret
	}
	return *o.LedgerDisk
}

// GetLedgerDiskOk returns a tuple with the LedgerDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) GetLedgerDiskOk() (*string, bool) {
	if o == nil || o.LedgerDisk == nil {
		return nil, false
	}
	return o.LedgerDisk, true
}

// HasLedgerDisk returns a boolean if a field has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) HasLedgerDisk() bool {
	if o != nil && o.LedgerDisk != nil {
		return true
	}

	return false
}

// SetLedgerDisk gets a reference to the given string and assigns it to the LedgerDisk field.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) SetLedgerDisk(v string) {
	o.LedgerDisk = &v
}

// GetMemory returns the Memory field value
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) GetMemory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) GetMemoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Memory, true
}

// SetMemory sets field value
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) SetMemory(v string) {
	o.Memory = v
}

func (o ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cpu"] = o.Cpu
	}
	if o.DirectPercentage != nil {
		toSerialize["directPercentage"] = o.DirectPercentage
	}
	if o.HeapPercentage != nil {
		toSerialize["heapPercentage"] = o.HeapPercentage
	}
	if o.JournalDisk != nil {
		toSerialize["journalDisk"] = o.JournalDisk
	}
	if o.LedgerDisk != nil {
		toSerialize["ledgerDisk"] = o.LedgerDisk
	}
	if true {
		toSerialize["memory"] = o.Memory
	}
	return json.Marshal(toSerialize)
}

type NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource struct {
	value *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource
	isSet bool
}

func (v NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) Get() *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource {
	return v.value
}

func (v *NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) Set(val *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) {
	v.value = val
	v.isSet = true
}

func (v NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) IsSet() bool {
	return v.isSet
}

func (v *NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource(val *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) *NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource {
	return &NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource{value: val, isSet: true}
}

func (v NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1BookkeeperNodeResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


