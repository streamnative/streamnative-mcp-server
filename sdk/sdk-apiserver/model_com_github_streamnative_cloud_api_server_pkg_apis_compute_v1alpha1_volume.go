// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume Volume represents a named volume in a pod that may be accessed by any container in the pod. The Volume API from the core group is not used directly to avoid unneeded fields defined in `VolumeSource` and reduce the size of the CRD. New fields in VolumeSource could be added as needed.
type ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume struct {
	ConfigMap *V1ConfigMapVolumeSource `json:"configMap,omitempty"`
	// Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `json:"name"`
	Secret *V1SecretVolumeSource `json:"secret,omitempty"`
}

// NewComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume instantiates a new ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume(name string) *ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume {
	this := ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume{}
	this.Name = name
	return &this
}

// NewComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1VolumeWithDefaults instantiates a new ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1VolumeWithDefaults() *ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume {
	this := ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume{}
	return &this
}

// GetConfigMap returns the ConfigMap field value if set, zero value otherwise.
func (o *ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume) GetConfigMap() V1ConfigMapVolumeSource {
	if o == nil || o.ConfigMap == nil {
		var ret V1ConfigMapVolumeSource
		return ret
	}
	return *o.ConfigMap
}

// GetConfigMapOk returns a tuple with the ConfigMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume) GetConfigMapOk() (*V1ConfigMapVolumeSource, bool) {
	if o == nil || o.ConfigMap == nil {
		return nil, false
	}
	return o.ConfigMap, true
}

// HasConfigMap returns a boolean if a field has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume) HasConfigMap() bool {
	if o != nil && o.ConfigMap != nil {
		return true
	}

	return false
}

// SetConfigMap gets a reference to the given V1ConfigMapVolumeSource and assigns it to the ConfigMap field.
func (o *ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume) SetConfigMap(v V1ConfigMapVolumeSource) {
	o.ConfigMap = &v
}

// GetName returns the Name field value
func (o *ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume) SetName(v string) {
	o.Name = v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume) GetSecret() V1SecretVolumeSource {
	if o == nil || o.Secret == nil {
		var ret V1SecretVolumeSource
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume) GetSecretOk() (*V1SecretVolumeSource, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given V1SecretVolumeSource and assigns it to the Secret field.
func (o *ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume) SetSecret(v V1SecretVolumeSource) {
	o.Secret = &v
}

func (o ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConfigMap != nil {
		toSerialize["configMap"] = o.ConfigMap
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	return json.Marshal(toSerialize)
}

type NullableComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume struct {
	value *ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume
	isSet bool
}

func (v NullableComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume) Get() *ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume {
	return v.value
}

func (v *NullableComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume) Set(val *ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume) {
	v.value = val
	v.isSet = true
}

func (v NullableComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume) IsSet() bool {
	return v.isSet
}

func (v *NullableComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume(val *ComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume) *NullableComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume {
	return &NullableComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume{value: val, isSet: true}
}

func (v NullableComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComGithubStreamnativeCloudApiServerPkgApisComputeV1alpha1Volume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


