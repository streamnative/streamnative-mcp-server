// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// V1Probe Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type V1Probe struct {
	Exec *V1ExecAction `json:"exec,omitempty"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`
	Grpc *V1GRPCAction `json:"grpc,omitempty"`
	HttpGet *V1HTTPGetAction `json:"httpGet,omitempty"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`
	TcpSocket *V1TCPSocketAction `json:"tcpSocket,omitempty"`
	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
	TerminationGracePeriodSeconds *int64 `json:"terminationGracePeriodSeconds,omitempty"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// NewV1Probe instantiates a new V1Probe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Probe() *V1Probe {
	this := V1Probe{}
	return &this
}

// NewV1ProbeWithDefaults instantiates a new V1Probe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ProbeWithDefaults() *V1Probe {
	this := V1Probe{}
	return &this
}

// GetExec returns the Exec field value if set, zero value otherwise.
func (o *V1Probe) GetExec() V1ExecAction {
	if o == nil || o.Exec == nil {
		var ret V1ExecAction
		return ret
	}
	return *o.Exec
}

// GetExecOk returns a tuple with the Exec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Probe) GetExecOk() (*V1ExecAction, bool) {
	if o == nil || o.Exec == nil {
		return nil, false
	}
	return o.Exec, true
}

// HasExec returns a boolean if a field has been set.
func (o *V1Probe) HasExec() bool {
	if o != nil && o.Exec != nil {
		return true
	}

	return false
}

// SetExec gets a reference to the given V1ExecAction and assigns it to the Exec field.
func (o *V1Probe) SetExec(v V1ExecAction) {
	o.Exec = &v
}

// GetFailureThreshold returns the FailureThreshold field value if set, zero value otherwise.
func (o *V1Probe) GetFailureThreshold() int32 {
	if o == nil || o.FailureThreshold == nil {
		var ret int32
		return ret
	}
	return *o.FailureThreshold
}

// GetFailureThresholdOk returns a tuple with the FailureThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Probe) GetFailureThresholdOk() (*int32, bool) {
	if o == nil || o.FailureThreshold == nil {
		return nil, false
	}
	return o.FailureThreshold, true
}

// HasFailureThreshold returns a boolean if a field has been set.
func (o *V1Probe) HasFailureThreshold() bool {
	if o != nil && o.FailureThreshold != nil {
		return true
	}

	return false
}

// SetFailureThreshold gets a reference to the given int32 and assigns it to the FailureThreshold field.
func (o *V1Probe) SetFailureThreshold(v int32) {
	o.FailureThreshold = &v
}

// GetGrpc returns the Grpc field value if set, zero value otherwise.
func (o *V1Probe) GetGrpc() V1GRPCAction {
	if o == nil || o.Grpc == nil {
		var ret V1GRPCAction
		return ret
	}
	return *o.Grpc
}

// GetGrpcOk returns a tuple with the Grpc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Probe) GetGrpcOk() (*V1GRPCAction, bool) {
	if o == nil || o.Grpc == nil {
		return nil, false
	}
	return o.Grpc, true
}

// HasGrpc returns a boolean if a field has been set.
func (o *V1Probe) HasGrpc() bool {
	if o != nil && o.Grpc != nil {
		return true
	}

	return false
}

// SetGrpc gets a reference to the given V1GRPCAction and assigns it to the Grpc field.
func (o *V1Probe) SetGrpc(v V1GRPCAction) {
	o.Grpc = &v
}

// GetHttpGet returns the HttpGet field value if set, zero value otherwise.
func (o *V1Probe) GetHttpGet() V1HTTPGetAction {
	if o == nil || o.HttpGet == nil {
		var ret V1HTTPGetAction
		return ret
	}
	return *o.HttpGet
}

// GetHttpGetOk returns a tuple with the HttpGet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Probe) GetHttpGetOk() (*V1HTTPGetAction, bool) {
	if o == nil || o.HttpGet == nil {
		return nil, false
	}
	return o.HttpGet, true
}

// HasHttpGet returns a boolean if a field has been set.
func (o *V1Probe) HasHttpGet() bool {
	if o != nil && o.HttpGet != nil {
		return true
	}

	return false
}

// SetHttpGet gets a reference to the given V1HTTPGetAction and assigns it to the HttpGet field.
func (o *V1Probe) SetHttpGet(v V1HTTPGetAction) {
	o.HttpGet = &v
}

// GetInitialDelaySeconds returns the InitialDelaySeconds field value if set, zero value otherwise.
func (o *V1Probe) GetInitialDelaySeconds() int32 {
	if o == nil || o.InitialDelaySeconds == nil {
		var ret int32
		return ret
	}
	return *o.InitialDelaySeconds
}

// GetInitialDelaySecondsOk returns a tuple with the InitialDelaySeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Probe) GetInitialDelaySecondsOk() (*int32, bool) {
	if o == nil || o.InitialDelaySeconds == nil {
		return nil, false
	}
	return o.InitialDelaySeconds, true
}

// HasInitialDelaySeconds returns a boolean if a field has been set.
func (o *V1Probe) HasInitialDelaySeconds() bool {
	if o != nil && o.InitialDelaySeconds != nil {
		return true
	}

	return false
}

// SetInitialDelaySeconds gets a reference to the given int32 and assigns it to the InitialDelaySeconds field.
func (o *V1Probe) SetInitialDelaySeconds(v int32) {
	o.InitialDelaySeconds = &v
}

// GetPeriodSeconds returns the PeriodSeconds field value if set, zero value otherwise.
func (o *V1Probe) GetPeriodSeconds() int32 {
	if o == nil || o.PeriodSeconds == nil {
		var ret int32
		return ret
	}
	return *o.PeriodSeconds
}

// GetPeriodSecondsOk returns a tuple with the PeriodSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Probe) GetPeriodSecondsOk() (*int32, bool) {
	if o == nil || o.PeriodSeconds == nil {
		return nil, false
	}
	return o.PeriodSeconds, true
}

// HasPeriodSeconds returns a boolean if a field has been set.
func (o *V1Probe) HasPeriodSeconds() bool {
	if o != nil && o.PeriodSeconds != nil {
		return true
	}

	return false
}

// SetPeriodSeconds gets a reference to the given int32 and assigns it to the PeriodSeconds field.
func (o *V1Probe) SetPeriodSeconds(v int32) {
	o.PeriodSeconds = &v
}

// GetSuccessThreshold returns the SuccessThreshold field value if set, zero value otherwise.
func (o *V1Probe) GetSuccessThreshold() int32 {
	if o == nil || o.SuccessThreshold == nil {
		var ret int32
		return ret
	}
	return *o.SuccessThreshold
}

// GetSuccessThresholdOk returns a tuple with the SuccessThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Probe) GetSuccessThresholdOk() (*int32, bool) {
	if o == nil || o.SuccessThreshold == nil {
		return nil, false
	}
	return o.SuccessThreshold, true
}

// HasSuccessThreshold returns a boolean if a field has been set.
func (o *V1Probe) HasSuccessThreshold() bool {
	if o != nil && o.SuccessThreshold != nil {
		return true
	}

	return false
}

// SetSuccessThreshold gets a reference to the given int32 and assigns it to the SuccessThreshold field.
func (o *V1Probe) SetSuccessThreshold(v int32) {
	o.SuccessThreshold = &v
}

// GetTcpSocket returns the TcpSocket field value if set, zero value otherwise.
func (o *V1Probe) GetTcpSocket() V1TCPSocketAction {
	if o == nil || o.TcpSocket == nil {
		var ret V1TCPSocketAction
		return ret
	}
	return *o.TcpSocket
}

// GetTcpSocketOk returns a tuple with the TcpSocket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Probe) GetTcpSocketOk() (*V1TCPSocketAction, bool) {
	if o == nil || o.TcpSocket == nil {
		return nil, false
	}
	return o.TcpSocket, true
}

// HasTcpSocket returns a boolean if a field has been set.
func (o *V1Probe) HasTcpSocket() bool {
	if o != nil && o.TcpSocket != nil {
		return true
	}

	return false
}

// SetTcpSocket gets a reference to the given V1TCPSocketAction and assigns it to the TcpSocket field.
func (o *V1Probe) SetTcpSocket(v V1TCPSocketAction) {
	o.TcpSocket = &v
}

// GetTerminationGracePeriodSeconds returns the TerminationGracePeriodSeconds field value if set, zero value otherwise.
func (o *V1Probe) GetTerminationGracePeriodSeconds() int64 {
	if o == nil || o.TerminationGracePeriodSeconds == nil {
		var ret int64
		return ret
	}
	return *o.TerminationGracePeriodSeconds
}

// GetTerminationGracePeriodSecondsOk returns a tuple with the TerminationGracePeriodSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Probe) GetTerminationGracePeriodSecondsOk() (*int64, bool) {
	if o == nil || o.TerminationGracePeriodSeconds == nil {
		return nil, false
	}
	return o.TerminationGracePeriodSeconds, true
}

// HasTerminationGracePeriodSeconds returns a boolean if a field has been set.
func (o *V1Probe) HasTerminationGracePeriodSeconds() bool {
	if o != nil && o.TerminationGracePeriodSeconds != nil {
		return true
	}

	return false
}

// SetTerminationGracePeriodSeconds gets a reference to the given int64 and assigns it to the TerminationGracePeriodSeconds field.
func (o *V1Probe) SetTerminationGracePeriodSeconds(v int64) {
	o.TerminationGracePeriodSeconds = &v
}

// GetTimeoutSeconds returns the TimeoutSeconds field value if set, zero value otherwise.
func (o *V1Probe) GetTimeoutSeconds() int32 {
	if o == nil || o.TimeoutSeconds == nil {
		var ret int32
		return ret
	}
	return *o.TimeoutSeconds
}

// GetTimeoutSecondsOk returns a tuple with the TimeoutSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Probe) GetTimeoutSecondsOk() (*int32, bool) {
	if o == nil || o.TimeoutSeconds == nil {
		return nil, false
	}
	return o.TimeoutSeconds, true
}

// HasTimeoutSeconds returns a boolean if a field has been set.
func (o *V1Probe) HasTimeoutSeconds() bool {
	if o != nil && o.TimeoutSeconds != nil {
		return true
	}

	return false
}

// SetTimeoutSeconds gets a reference to the given int32 and assigns it to the TimeoutSeconds field.
func (o *V1Probe) SetTimeoutSeconds(v int32) {
	o.TimeoutSeconds = &v
}

func (o V1Probe) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Exec != nil {
		toSerialize["exec"] = o.Exec
	}
	if o.FailureThreshold != nil {
		toSerialize["failureThreshold"] = o.FailureThreshold
	}
	if o.Grpc != nil {
		toSerialize["grpc"] = o.Grpc
	}
	if o.HttpGet != nil {
		toSerialize["httpGet"] = o.HttpGet
	}
	if o.InitialDelaySeconds != nil {
		toSerialize["initialDelaySeconds"] = o.InitialDelaySeconds
	}
	if o.PeriodSeconds != nil {
		toSerialize["periodSeconds"] = o.PeriodSeconds
	}
	if o.SuccessThreshold != nil {
		toSerialize["successThreshold"] = o.SuccessThreshold
	}
	if o.TcpSocket != nil {
		toSerialize["tcpSocket"] = o.TcpSocket
	}
	if o.TerminationGracePeriodSeconds != nil {
		toSerialize["terminationGracePeriodSeconds"] = o.TerminationGracePeriodSeconds
	}
	if o.TimeoutSeconds != nil {
		toSerialize["timeoutSeconds"] = o.TimeoutSeconds
	}
	return json.Marshal(toSerialize)
}

type NullableV1Probe struct {
	value *V1Probe
	isSet bool
}

func (v NullableV1Probe) Get() *V1Probe {
	return v.value
}

func (v *NullableV1Probe) Set(val *V1Probe) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Probe) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Probe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Probe(val *V1Probe) *NullableV1Probe {
	return &NullableV1Probe{value: val, isSet: true}
}

func (v NullableV1Probe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Probe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


