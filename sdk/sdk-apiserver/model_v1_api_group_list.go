// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// V1APIGroupList APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.
type V1APIGroupList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`
	// groups is a list of APIGroup.
	Groups []V1APIGroup `json:"groups"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
}

// NewV1APIGroupList instantiates a new V1APIGroupList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1APIGroupList(groups []V1APIGroup) *V1APIGroupList {
	this := V1APIGroupList{}
	this.Groups = groups
	return &this
}

// NewV1APIGroupListWithDefaults instantiates a new V1APIGroupList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1APIGroupListWithDefaults() *V1APIGroupList {
	this := V1APIGroupList{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *V1APIGroupList) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1APIGroupList) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *V1APIGroupList) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *V1APIGroupList) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetGroups returns the Groups field value
func (o *V1APIGroupList) GetGroups() []V1APIGroup {
	if o == nil {
		var ret []V1APIGroup
		return ret
	}

	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value
// and a boolean to check if the value has been set.
func (o *V1APIGroupList) GetGroupsOk() ([]V1APIGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.Groups, true
}

// SetGroups sets field value
func (o *V1APIGroupList) SetGroups(v []V1APIGroup) {
	o.Groups = v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *V1APIGroupList) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1APIGroupList) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *V1APIGroupList) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *V1APIGroupList) SetKind(v string) {
	o.Kind = &v
}

func (o V1APIGroupList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if true {
		toSerialize["groups"] = o.Groups
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	return json.Marshal(toSerialize)
}

type NullableV1APIGroupList struct {
	value *V1APIGroupList
	isSet bool
}

func (v NullableV1APIGroupList) Get() *V1APIGroupList {
	return v.value
}

func (v *NullableV1APIGroupList) Set(val *V1APIGroupList) {
	v.value = val
	v.isSet = true
}

func (v NullableV1APIGroupList) IsSet() bool {
	return v.isSet
}

func (v *NullableV1APIGroupList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1APIGroupList(val *V1APIGroupList) *NullableV1APIGroupList {
	return &NullableV1APIGroupList{value: val, isSet: true}
}

func (v NullableV1APIGroupList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1APIGroupList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


