// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// V1ServerAddressByClientCIDR ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.
type V1ServerAddressByClientCIDR struct {
	// The CIDR with which clients can match their IP to figure out the server address that they should use.
	ClientCIDR string `json:"clientCIDR"`
	// Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.
	ServerAddress string `json:"serverAddress"`
}

// NewV1ServerAddressByClientCIDR instantiates a new V1ServerAddressByClientCIDR object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ServerAddressByClientCIDR(clientCIDR string, serverAddress string) *V1ServerAddressByClientCIDR {
	this := V1ServerAddressByClientCIDR{}
	this.ClientCIDR = clientCIDR
	this.ServerAddress = serverAddress
	return &this
}

// NewV1ServerAddressByClientCIDRWithDefaults instantiates a new V1ServerAddressByClientCIDR object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ServerAddressByClientCIDRWithDefaults() *V1ServerAddressByClientCIDR {
	this := V1ServerAddressByClientCIDR{}
	return &this
}

// GetClientCIDR returns the ClientCIDR field value
func (o *V1ServerAddressByClientCIDR) GetClientCIDR() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientCIDR
}

// GetClientCIDROk returns a tuple with the ClientCIDR field value
// and a boolean to check if the value has been set.
func (o *V1ServerAddressByClientCIDR) GetClientCIDROk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientCIDR, true
}

// SetClientCIDR sets field value
func (o *V1ServerAddressByClientCIDR) SetClientCIDR(v string) {
	o.ClientCIDR = v
}

// GetServerAddress returns the ServerAddress field value
func (o *V1ServerAddressByClientCIDR) GetServerAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerAddress
}

// GetServerAddressOk returns a tuple with the ServerAddress field value
// and a boolean to check if the value has been set.
func (o *V1ServerAddressByClientCIDR) GetServerAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerAddress, true
}

// SetServerAddress sets field value
func (o *V1ServerAddressByClientCIDR) SetServerAddress(v string) {
	o.ServerAddress = v
}

func (o V1ServerAddressByClientCIDR) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["clientCIDR"] = o.ClientCIDR
	}
	if true {
		toSerialize["serverAddress"] = o.ServerAddress
	}
	return json.Marshal(toSerialize)
}

type NullableV1ServerAddressByClientCIDR struct {
	value *V1ServerAddressByClientCIDR
	isSet bool
}

func (v NullableV1ServerAddressByClientCIDR) Get() *V1ServerAddressByClientCIDR {
	return v.value
}

func (v *NullableV1ServerAddressByClientCIDR) Set(val *V1ServerAddressByClientCIDR) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ServerAddressByClientCIDR) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ServerAddressByClientCIDR) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ServerAddressByClientCIDR(val *V1ServerAddressByClientCIDR) *NullableV1ServerAddressByClientCIDR {
	return &NullableV1ServerAddressByClientCIDR{value: val, isSet: true}
}

func (v NullableV1ServerAddressByClientCIDR) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ServerAddressByClientCIDR) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


