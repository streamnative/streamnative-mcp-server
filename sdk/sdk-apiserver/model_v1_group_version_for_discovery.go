// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// V1GroupVersionForDiscovery GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility.
type V1GroupVersionForDiscovery struct {
	// groupVersion specifies the API group and version in the form \"group/version\"
	GroupVersion string `json:"groupVersion"`
	// version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.
	Version string `json:"version"`
}

// NewV1GroupVersionForDiscovery instantiates a new V1GroupVersionForDiscovery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1GroupVersionForDiscovery(groupVersion string, version string) *V1GroupVersionForDiscovery {
	this := V1GroupVersionForDiscovery{}
	this.GroupVersion = groupVersion
	this.Version = version
	return &this
}

// NewV1GroupVersionForDiscoveryWithDefaults instantiates a new V1GroupVersionForDiscovery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1GroupVersionForDiscoveryWithDefaults() *V1GroupVersionForDiscovery {
	this := V1GroupVersionForDiscovery{}
	return &this
}

// GetGroupVersion returns the GroupVersion field value
func (o *V1GroupVersionForDiscovery) GetGroupVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupVersion
}

// GetGroupVersionOk returns a tuple with the GroupVersion field value
// and a boolean to check if the value has been set.
func (o *V1GroupVersionForDiscovery) GetGroupVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupVersion, true
}

// SetGroupVersion sets field value
func (o *V1GroupVersionForDiscovery) SetGroupVersion(v string) {
	o.GroupVersion = v
}

// GetVersion returns the Version field value
func (o *V1GroupVersionForDiscovery) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *V1GroupVersionForDiscovery) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *V1GroupVersionForDiscovery) SetVersion(v string) {
	o.Version = v
}

func (o V1GroupVersionForDiscovery) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["groupVersion"] = o.GroupVersion
	}
	if true {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableV1GroupVersionForDiscovery struct {
	value *V1GroupVersionForDiscovery
	isSet bool
}

func (v NullableV1GroupVersionForDiscovery) Get() *V1GroupVersionForDiscovery {
	return v.value
}

func (v *NullableV1GroupVersionForDiscovery) Set(val *V1GroupVersionForDiscovery) {
	v.value = val
	v.isSet = true
}

func (v NullableV1GroupVersionForDiscovery) IsSet() bool {
	return v.isSet
}

func (v *NullableV1GroupVersionForDiscovery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1GroupVersionForDiscovery(val *V1GroupVersionForDiscovery) *NullableV1GroupVersionForDiscovery {
	return &NullableV1GroupVersionForDiscovery{value: val, isSet: true}
}

func (v NullableV1GroupVersionForDiscovery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1GroupVersionForDiscovery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


