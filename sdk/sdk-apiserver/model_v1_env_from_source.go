// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// V1EnvFromSource EnvFromSource represents the source of a set of ConfigMaps
type V1EnvFromSource struct {
	ConfigMapRef *V1ConfigMapEnvSource `json:"configMapRef,omitempty"`
	// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix *string `json:"prefix,omitempty"`
	SecretRef *V1SecretEnvSource `json:"secretRef,omitempty"`
}

// NewV1EnvFromSource instantiates a new V1EnvFromSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1EnvFromSource() *V1EnvFromSource {
	this := V1EnvFromSource{}
	return &this
}

// NewV1EnvFromSourceWithDefaults instantiates a new V1EnvFromSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1EnvFromSourceWithDefaults() *V1EnvFromSource {
	this := V1EnvFromSource{}
	return &this
}

// GetConfigMapRef returns the ConfigMapRef field value if set, zero value otherwise.
func (o *V1EnvFromSource) GetConfigMapRef() V1ConfigMapEnvSource {
	if o == nil || o.ConfigMapRef == nil {
		var ret V1ConfigMapEnvSource
		return ret
	}
	return *o.ConfigMapRef
}

// GetConfigMapRefOk returns a tuple with the ConfigMapRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1EnvFromSource) GetConfigMapRefOk() (*V1ConfigMapEnvSource, bool) {
	if o == nil || o.ConfigMapRef == nil {
		return nil, false
	}
	return o.ConfigMapRef, true
}

// HasConfigMapRef returns a boolean if a field has been set.
func (o *V1EnvFromSource) HasConfigMapRef() bool {
	if o != nil && o.ConfigMapRef != nil {
		return true
	}

	return false
}

// SetConfigMapRef gets a reference to the given V1ConfigMapEnvSource and assigns it to the ConfigMapRef field.
func (o *V1EnvFromSource) SetConfigMapRef(v V1ConfigMapEnvSource) {
	o.ConfigMapRef = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *V1EnvFromSource) GetPrefix() string {
	if o == nil || o.Prefix == nil {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1EnvFromSource) GetPrefixOk() (*string, bool) {
	if o == nil || o.Prefix == nil {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *V1EnvFromSource) HasPrefix() bool {
	if o != nil && o.Prefix != nil {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *V1EnvFromSource) SetPrefix(v string) {
	o.Prefix = &v
}

// GetSecretRef returns the SecretRef field value if set, zero value otherwise.
func (o *V1EnvFromSource) GetSecretRef() V1SecretEnvSource {
	if o == nil || o.SecretRef == nil {
		var ret V1SecretEnvSource
		return ret
	}
	return *o.SecretRef
}

// GetSecretRefOk returns a tuple with the SecretRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1EnvFromSource) GetSecretRefOk() (*V1SecretEnvSource, bool) {
	if o == nil || o.SecretRef == nil {
		return nil, false
	}
	return o.SecretRef, true
}

// HasSecretRef returns a boolean if a field has been set.
func (o *V1EnvFromSource) HasSecretRef() bool {
	if o != nil && o.SecretRef != nil {
		return true
	}

	return false
}

// SetSecretRef gets a reference to the given V1SecretEnvSource and assigns it to the SecretRef field.
func (o *V1EnvFromSource) SetSecretRef(v V1SecretEnvSource) {
	o.SecretRef = &v
}

func (o V1EnvFromSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConfigMapRef != nil {
		toSerialize["configMapRef"] = o.ConfigMapRef
	}
	if o.Prefix != nil {
		toSerialize["prefix"] = o.Prefix
	}
	if o.SecretRef != nil {
		toSerialize["secretRef"] = o.SecretRef
	}
	return json.Marshal(toSerialize)
}

type NullableV1EnvFromSource struct {
	value *V1EnvFromSource
	isSet bool
}

func (v NullableV1EnvFromSource) Get() *V1EnvFromSource {
	return v.value
}

func (v *NullableV1EnvFromSource) Set(val *V1EnvFromSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1EnvFromSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1EnvFromSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1EnvFromSource(val *V1EnvFromSource) *NullableV1EnvFromSource {
	return &NullableV1EnvFromSource{value: val, isSet: true}
}

func (v NullableV1EnvFromSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1EnvFromSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


