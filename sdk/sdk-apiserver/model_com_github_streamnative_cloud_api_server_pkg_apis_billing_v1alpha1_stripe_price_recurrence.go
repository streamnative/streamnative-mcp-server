// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence StripePriceRecurrence defines how a price's billing recurs
type ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence struct {
	AggregateUsage *string `json:"aggregateUsage,omitempty"`
	// Interval is how often the price recurs
	Interval *string `json:"interval,omitempty"`
	// The number of intervals. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one-year interval is allowed (1 year, 12 months, or 52 weeks).
	IntervalCount *int64 `json:"intervalCount,omitempty"`
	UsageType *string `json:"usageType,omitempty"`
}

// NewComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence instantiates a new ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence() *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence {
	this := ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence{}
	return &this
}

// NewComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrenceWithDefaults instantiates a new ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrenceWithDefaults() *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence {
	this := ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence{}
	return &this
}

// GetAggregateUsage returns the AggregateUsage field value if set, zero value otherwise.
func (o *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) GetAggregateUsage() string {
	if o == nil || o.AggregateUsage == nil {
		var ret string
		return ret
	}
	return *o.AggregateUsage
}

// GetAggregateUsageOk returns a tuple with the AggregateUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) GetAggregateUsageOk() (*string, bool) {
	if o == nil || o.AggregateUsage == nil {
		return nil, false
	}
	return o.AggregateUsage, true
}

// HasAggregateUsage returns a boolean if a field has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) HasAggregateUsage() bool {
	if o != nil && o.AggregateUsage != nil {
		return true
	}

	return false
}

// SetAggregateUsage gets a reference to the given string and assigns it to the AggregateUsage field.
func (o *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) SetAggregateUsage(v string) {
	o.AggregateUsage = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) GetInterval() string {
	if o == nil || o.Interval == nil {
		var ret string
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) GetIntervalOk() (*string, bool) {
	if o == nil || o.Interval == nil {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) HasInterval() bool {
	if o != nil && o.Interval != nil {
		return true
	}

	return false
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) SetInterval(v string) {
	o.Interval = &v
}

// GetIntervalCount returns the IntervalCount field value if set, zero value otherwise.
func (o *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) GetIntervalCount() int64 {
	if o == nil || o.IntervalCount == nil {
		var ret int64
		return ret
	}
	return *o.IntervalCount
}

// GetIntervalCountOk returns a tuple with the IntervalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) GetIntervalCountOk() (*int64, bool) {
	if o == nil || o.IntervalCount == nil {
		return nil, false
	}
	return o.IntervalCount, true
}

// HasIntervalCount returns a boolean if a field has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) HasIntervalCount() bool {
	if o != nil && o.IntervalCount != nil {
		return true
	}

	return false
}

// SetIntervalCount gets a reference to the given int64 and assigns it to the IntervalCount field.
func (o *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) SetIntervalCount(v int64) {
	o.IntervalCount = &v
}

// GetUsageType returns the UsageType field value if set, zero value otherwise.
func (o *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) GetUsageType() string {
	if o == nil || o.UsageType == nil {
		var ret string
		return ret
	}
	return *o.UsageType
}

// GetUsageTypeOk returns a tuple with the UsageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) GetUsageTypeOk() (*string, bool) {
	if o == nil || o.UsageType == nil {
		return nil, false
	}
	return o.UsageType, true
}

// HasUsageType returns a boolean if a field has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) HasUsageType() bool {
	if o != nil && o.UsageType != nil {
		return true
	}

	return false
}

// SetUsageType gets a reference to the given string and assigns it to the UsageType field.
func (o *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) SetUsageType(v string) {
	o.UsageType = &v
}

func (o ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AggregateUsage != nil {
		toSerialize["aggregateUsage"] = o.AggregateUsage
	}
	if o.Interval != nil {
		toSerialize["interval"] = o.Interval
	}
	if o.IntervalCount != nil {
		toSerialize["intervalCount"] = o.IntervalCount
	}
	if o.UsageType != nil {
		toSerialize["usageType"] = o.UsageType
	}
	return json.Marshal(toSerialize)
}

type NullableComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence struct {
	value *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence
	isSet bool
}

func (v NullableComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) Get() *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence {
	return v.value
}

func (v *NullableComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) Set(val *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) {
	v.value = val
	v.isSet = true
}

func (v NullableComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) IsSet() bool {
	return v.isSet
}

func (v *NullableComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence(val *ComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) *NullableComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence {
	return &NullableComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence{value: val, isSet: true}
}

func (v NullableComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComGithubStreamnativeCloudApiServerPkgApisBillingV1alpha1StripePriceRecurrence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


