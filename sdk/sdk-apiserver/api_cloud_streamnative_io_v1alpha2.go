// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// CloudStreamnativeIoV1alpha2ApiService CloudStreamnativeIoV1alpha2Api service
type CloudStreamnativeIoV1alpha2ApiService service

type ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription) ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Pretty(pretty string) ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) DryRun(dryRun string) ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) FieldManager(fieldManager string) ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription, *http.Response, error) {
	return r.ApiService.CreateCloudStreamnativeIoV1alpha2AWSSubscriptionExecute(r)
}

/*
CreateCloudStreamnativeIoV1alpha2AWSSubscription Method for CreateCloudStreamnativeIoV1alpha2AWSSubscription

create an AWSSubscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2AWSSubscription(ctx context.Context) ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	return ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2AWSSubscriptionExecute(r ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.CreateCloudStreamnativeIoV1alpha2AWSSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/awssubscriptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription) ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) Pretty(pretty string) ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) DryRun(dryRun string) ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) FieldManager(fieldManager string) ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription, *http.Response, error) {
	return r.ApiService.CreateCloudStreamnativeIoV1alpha2AWSSubscriptionStatusExecute(r)
}

/*
CreateCloudStreamnativeIoV1alpha2AWSSubscriptionStatus Method for CreateCloudStreamnativeIoV1alpha2AWSSubscriptionStatus

create status of an AWSSubscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the AWSSubscription
 @return ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2AWSSubscriptionStatus(ctx context.Context, name string) ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	return ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2AWSSubscriptionStatusExecute(r ApiCreateCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.CreateCloudStreamnativeIoV1alpha2AWSSubscriptionStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/awssubscriptions/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	namespace string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet) ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Pretty(pretty string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) DryRun(dryRun string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) FieldManager(fieldManager string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet, *http.Response, error) {
	return r.ApiService.CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetExecute(r)
}

/*
CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet Method for CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet

create a BookKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet(ctx context.Context, namespace string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	return ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetExecute(r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersets"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	namespace string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption) ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Pretty(pretty string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) DryRun(dryRun string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) FieldManager(fieldManager string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption, *http.Response, error) {
	return r.ApiService.CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionExecute(r)
}

/*
CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption Method for CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption

create a BookKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption(ctx context.Context, namespace string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	return ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionExecute(r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersetoptions"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption) ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) Pretty(pretty string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) DryRun(dryRun string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) FieldManager(fieldManager string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption, *http.Response, error) {
	return r.ApiService.CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusExecute(r)
}

/*
CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus Method for CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus

create status of a BookKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus(ctx context.Context, name string, namespace string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	return ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusExecute(r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersetoptions/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet) ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) Pretty(pretty string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) DryRun(dryRun string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) FieldManager(fieldManager string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet, *http.Response, error) {
	return r.ApiService.CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusExecute(r)
}

/*
CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus Method for CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus

create status of a BookKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus(ctx context.Context, name string, namespace string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	return ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusExecute(r ApiCreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.CreateCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersets/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	namespace string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet) ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Pretty(pretty string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) DryRun(dryRun string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) FieldManager(fieldManager string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet, *http.Response, error) {
	return r.ApiService.CreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetExecute(r)
}

/*
CreateCloudStreamnativeIoV1alpha2NamespacedMonitorSet Method for CreateCloudStreamnativeIoV1alpha2NamespacedMonitorSet

create a MonitorSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2NamespacedMonitorSet(ctx context.Context, namespace string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	return ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetExecute(r ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.CreateCloudStreamnativeIoV1alpha2NamespacedMonitorSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/monitorsets"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet) ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) Pretty(pretty string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) DryRun(dryRun string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) FieldManager(fieldManager string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet, *http.Response, error) {
	return r.ApiService.CreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusExecute(r)
}

/*
CreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus Method for CreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus

create status of a MonitorSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the MonitorSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus(ctx context.Context, name string, namespace string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	return ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusExecute(r ApiCreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.CreateCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/monitorsets/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	namespace string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet) ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Pretty(pretty string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) DryRun(dryRun string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) FieldManager(fieldManager string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet, *http.Response, error) {
	return r.ApiService.CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetExecute(r)
}

/*
CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet Method for CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet

create a ZooKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet(ctx context.Context, namespace string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	return ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetExecute(r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersets"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	namespace string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption) ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Pretty(pretty string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) DryRun(dryRun string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) FieldManager(fieldManager string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption, *http.Response, error) {
	return r.ApiService.CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionExecute(r)
}

/*
CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption Method for CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption

create a ZooKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption(ctx context.Context, namespace string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	return ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionExecute(r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersetoptions"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption) ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) Pretty(pretty string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) DryRun(dryRun string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) FieldManager(fieldManager string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption, *http.Response, error) {
	return r.ApiService.CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusExecute(r)
}

/*
CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus Method for CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus

create status of a ZooKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus(ctx context.Context, name string, namespace string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	return ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusExecute(r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersetoptions/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet) ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) Pretty(pretty string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) DryRun(dryRun string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) FieldManager(fieldManager string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet, *http.Response, error) {
	return r.ApiService.CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusExecute(r)
}

/*
CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus Method for CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus

create status of a ZooKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus(ctx context.Context, name string, namespace string) ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	return ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet
func (a *CloudStreamnativeIoV1alpha2ApiService) CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusExecute(r ApiCreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.CreateCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersets/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	pretty *string
	dryRun *string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	body *V1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Pretty(pretty string) ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) DryRun(dryRun string) ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.dryRun = &dryRun
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) OrphanDependents(orphanDependents bool) ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) PropagationPolicy(propagationPolicy string) ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Body(body V1DeleteOptions) ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Execute() (*V1Status, *http.Response, error) {
	return r.ApiService.DeleteCloudStreamnativeIoV1alpha2AWSSubscriptionExecute(r)
}

/*
DeleteCloudStreamnativeIoV1alpha2AWSSubscription Method for DeleteCloudStreamnativeIoV1alpha2AWSSubscription

delete an AWSSubscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the AWSSubscription
 @return ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2AWSSubscription(ctx context.Context, name string) ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	return ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return V1Status
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2AWSSubscriptionExecute(r ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) (*V1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.DeleteCloudStreamnativeIoV1alpha2AWSSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/awssubscriptions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	pretty *string
	dryRun *string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	body *V1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) Pretty(pretty string) ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) DryRun(dryRun string) ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.dryRun = &dryRun
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) OrphanDependents(orphanDependents bool) ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) PropagationPolicy(propagationPolicy string) ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) Body(body V1DeleteOptions) ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) Execute() (*V1Status, *http.Response, error) {
	return r.ApiService.DeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatusExecute(r)
}

/*
DeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatus Method for DeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatus

delete status of an AWSSubscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the AWSSubscription
 @return ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatus(ctx context.Context, name string) ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	return ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return V1Status
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatusExecute(r ApiDeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) (*V1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.DeleteCloudStreamnativeIoV1alpha2AWSSubscriptionStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/awssubscriptions/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	pretty *string
	continue_ *string
	dryRun *string
	fieldSelector *string
	gracePeriodSeconds *int32
	labelSelector *string
	limit *int32
	orphanDependents *bool
	propagationPolicy *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	body *V1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest) Pretty(pretty string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest {
	r.pretty = &pretty
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest) Continue_(continue_ string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest {
	r.continue_ = &continue_
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest) DryRun(dryRun string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest {
	r.dryRun = &dryRun
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest) FieldSelector(fieldSelector string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest) LabelSelector(labelSelector string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest) Limit(limit int32) ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest {
	r.limit = &limit
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest) OrphanDependents(orphanDependents bool) ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest) PropagationPolicy(propagationPolicy string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest) ResourceVersion(resourceVersion string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest) ResourceVersionMatch(resourceVersionMatch string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest) TimeoutSeconds(timeoutSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest) Body(body V1DeleteOptions) ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest) Execute() (*V1Status, *http.Response, error) {
	return r.ApiService.DeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionExecute(r)
}

/*
DeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscription Method for DeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscription

delete collection of AWSSubscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscription(ctx context.Context) ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest {
	return ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1Status
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionExecute(r ApiDeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscriptionRequest) (*V1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.DeleteCloudStreamnativeIoV1alpha2CollectionAWSSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/awssubscriptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	namespace string
	pretty *string
	continue_ *string
	dryRun *string
	fieldSelector *string
	gracePeriodSeconds *int32
	labelSelector *string
	limit *int32
	orphanDependents *bool
	propagationPolicy *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	body *V1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest) Pretty(pretty string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest {
	r.pretty = &pretty
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest) Continue_(continue_ string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest {
	r.continue_ = &continue_
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest) DryRun(dryRun string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest {
	r.dryRun = &dryRun
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest) FieldSelector(fieldSelector string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest) LabelSelector(labelSelector string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest) Limit(limit int32) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest {
	r.limit = &limit
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest) OrphanDependents(orphanDependents bool) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest) PropagationPolicy(propagationPolicy string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest) ResourceVersion(resourceVersion string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest) ResourceVersionMatch(resourceVersionMatch string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest) TimeoutSeconds(timeoutSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest) Body(body V1DeleteOptions) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest) Execute() (*V1Status, *http.Response, error) {
	return r.ApiService.DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetExecute(r)
}

/*
DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSet Method for DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSet

delete collection of BookKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSet(ctx context.Context, namespace string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest {
	return ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1Status
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetExecute(r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetRequest) (*V1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersets"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	namespace string
	pretty *string
	continue_ *string
	dryRun *string
	fieldSelector *string
	gracePeriodSeconds *int32
	labelSelector *string
	limit *int32
	orphanDependents *bool
	propagationPolicy *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	body *V1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest) Pretty(pretty string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest {
	r.pretty = &pretty
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest) Continue_(continue_ string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest {
	r.continue_ = &continue_
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest) DryRun(dryRun string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest {
	r.dryRun = &dryRun
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest) FieldSelector(fieldSelector string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest) LabelSelector(labelSelector string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest) Limit(limit int32) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest {
	r.limit = &limit
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest) OrphanDependents(orphanDependents bool) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest) PropagationPolicy(propagationPolicy string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest) ResourceVersion(resourceVersion string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest) ResourceVersionMatch(resourceVersionMatch string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest) TimeoutSeconds(timeoutSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest) Body(body V1DeleteOptions) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest) Execute() (*V1Status, *http.Response, error) {
	return r.ApiService.DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionExecute(r)
}

/*
DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOption Method for DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOption

delete collection of BookKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOption(ctx context.Context, namespace string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest {
	return ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1Status
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionExecute(r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOptionRequest) (*V1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedBookKeeperSetOption")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersetoptions"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	namespace string
	pretty *string
	continue_ *string
	dryRun *string
	fieldSelector *string
	gracePeriodSeconds *int32
	labelSelector *string
	limit *int32
	orphanDependents *bool
	propagationPolicy *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	body *V1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest) Pretty(pretty string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest {
	r.pretty = &pretty
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest) Continue_(continue_ string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest {
	r.continue_ = &continue_
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest) DryRun(dryRun string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest {
	r.dryRun = &dryRun
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest) FieldSelector(fieldSelector string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest) LabelSelector(labelSelector string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest) Limit(limit int32) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest {
	r.limit = &limit
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest) OrphanDependents(orphanDependents bool) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest) PropagationPolicy(propagationPolicy string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest) ResourceVersion(resourceVersion string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest) ResourceVersionMatch(resourceVersionMatch string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest) TimeoutSeconds(timeoutSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest) Body(body V1DeleteOptions) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest) Execute() (*V1Status, *http.Response, error) {
	return r.ApiService.DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetExecute(r)
}

/*
DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSet Method for DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSet

delete collection of MonitorSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSet(ctx context.Context, namespace string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest {
	return ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1Status
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetExecute(r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSetRequest) (*V1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedMonitorSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/monitorsets"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	namespace string
	pretty *string
	continue_ *string
	dryRun *string
	fieldSelector *string
	gracePeriodSeconds *int32
	labelSelector *string
	limit *int32
	orphanDependents *bool
	propagationPolicy *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	body *V1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest) Pretty(pretty string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest {
	r.pretty = &pretty
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest) Continue_(continue_ string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest {
	r.continue_ = &continue_
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest) DryRun(dryRun string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest {
	r.dryRun = &dryRun
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest) FieldSelector(fieldSelector string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest) LabelSelector(labelSelector string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest) Limit(limit int32) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest {
	r.limit = &limit
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest) OrphanDependents(orphanDependents bool) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest) PropagationPolicy(propagationPolicy string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest) ResourceVersion(resourceVersion string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest) ResourceVersionMatch(resourceVersionMatch string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest) TimeoutSeconds(timeoutSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest) Body(body V1DeleteOptions) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest) Execute() (*V1Status, *http.Response, error) {
	return r.ApiService.DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetExecute(r)
}

/*
DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSet Method for DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSet

delete collection of ZooKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSet(ctx context.Context, namespace string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest {
	return ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1Status
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetExecute(r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetRequest) (*V1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersets"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	namespace string
	pretty *string
	continue_ *string
	dryRun *string
	fieldSelector *string
	gracePeriodSeconds *int32
	labelSelector *string
	limit *int32
	orphanDependents *bool
	propagationPolicy *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	body *V1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest) Pretty(pretty string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest {
	r.pretty = &pretty
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest) Continue_(continue_ string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest {
	r.continue_ = &continue_
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest) DryRun(dryRun string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest {
	r.dryRun = &dryRun
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest) FieldSelector(fieldSelector string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest) LabelSelector(labelSelector string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest) Limit(limit int32) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest {
	r.limit = &limit
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest) OrphanDependents(orphanDependents bool) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest) PropagationPolicy(propagationPolicy string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest) ResourceVersion(resourceVersion string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest) ResourceVersionMatch(resourceVersionMatch string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest) TimeoutSeconds(timeoutSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest) Body(body V1DeleteOptions) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest) Execute() (*V1Status, *http.Response, error) {
	return r.ApiService.DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionExecute(r)
}

/*
DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOption Method for DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOption

delete collection of ZooKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOption(ctx context.Context, namespace string) ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest {
	return ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1Status
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionExecute(r ApiDeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOptionRequest) (*V1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.DeleteCloudStreamnativeIoV1alpha2CollectionNamespacedZooKeeperSetOption")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersetoptions"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	pretty *string
	dryRun *string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	body *V1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Pretty(pretty string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) DryRun(dryRun string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.dryRun = &dryRun
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) OrphanDependents(orphanDependents bool) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) PropagationPolicy(propagationPolicy string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Body(body V1DeleteOptions) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Execute() (*V1Status, *http.Response, error) {
	return r.ApiService.DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetExecute(r)
}

/*
DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet Method for DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet

delete a BookKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet(ctx context.Context, name string, namespace string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	return ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1Status
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetExecute(r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) (*V1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersets/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	pretty *string
	dryRun *string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	body *V1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Pretty(pretty string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) DryRun(dryRun string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.dryRun = &dryRun
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) OrphanDependents(orphanDependents bool) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) PropagationPolicy(propagationPolicy string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Body(body V1DeleteOptions) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Execute() (*V1Status, *http.Response, error) {
	return r.ApiService.DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionExecute(r)
}

/*
DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption Method for DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption

delete a BookKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption(ctx context.Context, name string, namespace string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	return ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1Status
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionExecute(r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) (*V1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersetoptions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	pretty *string
	dryRun *string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	body *V1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) Pretty(pretty string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) DryRun(dryRun string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.dryRun = &dryRun
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) OrphanDependents(orphanDependents bool) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) PropagationPolicy(propagationPolicy string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) Body(body V1DeleteOptions) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) Execute() (*V1Status, *http.Response, error) {
	return r.ApiService.DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusExecute(r)
}

/*
DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus Method for DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus

delete status of a BookKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus(ctx context.Context, name string, namespace string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	return ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1Status
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusExecute(r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) (*V1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersetoptions/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	pretty *string
	dryRun *string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	body *V1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) Pretty(pretty string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) DryRun(dryRun string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.dryRun = &dryRun
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) OrphanDependents(orphanDependents bool) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) PropagationPolicy(propagationPolicy string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) Body(body V1DeleteOptions) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) Execute() (*V1Status, *http.Response, error) {
	return r.ApiService.DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusExecute(r)
}

/*
DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus Method for DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus

delete status of a BookKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus(ctx context.Context, name string, namespace string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	return ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1Status
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusExecute(r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) (*V1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.DeleteCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersets/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	pretty *string
	dryRun *string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	body *V1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Pretty(pretty string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) DryRun(dryRun string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.dryRun = &dryRun
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) OrphanDependents(orphanDependents bool) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) PropagationPolicy(propagationPolicy string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Body(body V1DeleteOptions) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Execute() (*V1Status, *http.Response, error) {
	return r.ApiService.DeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetExecute(r)
}

/*
DeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSet Method for DeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSet

delete a MonitorSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the MonitorSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSet(ctx context.Context, name string, namespace string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	return ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1Status
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetExecute(r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) (*V1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.DeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/monitorsets/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	pretty *string
	dryRun *string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	body *V1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) Pretty(pretty string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) DryRun(dryRun string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.dryRun = &dryRun
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) OrphanDependents(orphanDependents bool) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) PropagationPolicy(propagationPolicy string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) Body(body V1DeleteOptions) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) Execute() (*V1Status, *http.Response, error) {
	return r.ApiService.DeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusExecute(r)
}

/*
DeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus Method for DeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus

delete status of a MonitorSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the MonitorSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus(ctx context.Context, name string, namespace string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	return ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1Status
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusExecute(r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) (*V1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.DeleteCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/monitorsets/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	pretty *string
	dryRun *string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	body *V1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Pretty(pretty string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) DryRun(dryRun string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.dryRun = &dryRun
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) OrphanDependents(orphanDependents bool) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) PropagationPolicy(propagationPolicy string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Body(body V1DeleteOptions) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Execute() (*V1Status, *http.Response, error) {
	return r.ApiService.DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetExecute(r)
}

/*
DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet Method for DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet

delete a ZooKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet(ctx context.Context, name string, namespace string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	return ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1Status
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetExecute(r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) (*V1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersets/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	pretty *string
	dryRun *string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	body *V1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Pretty(pretty string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) DryRun(dryRun string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.dryRun = &dryRun
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) OrphanDependents(orphanDependents bool) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) PropagationPolicy(propagationPolicy string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Body(body V1DeleteOptions) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Execute() (*V1Status, *http.Response, error) {
	return r.ApiService.DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionExecute(r)
}

/*
DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption Method for DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption

delete a ZooKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption(ctx context.Context, name string, namespace string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	return ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1Status
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionExecute(r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) (*V1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersetoptions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	pretty *string
	dryRun *string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	body *V1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) Pretty(pretty string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) DryRun(dryRun string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.dryRun = &dryRun
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) OrphanDependents(orphanDependents bool) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) PropagationPolicy(propagationPolicy string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) Body(body V1DeleteOptions) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) Execute() (*V1Status, *http.Response, error) {
	return r.ApiService.DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusExecute(r)
}

/*
DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus Method for DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus

delete status of a ZooKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus(ctx context.Context, name string, namespace string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	return ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1Status
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusExecute(r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) (*V1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersetoptions/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	pretty *string
	dryRun *string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	body *V1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) Pretty(pretty string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) DryRun(dryRun string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.dryRun = &dryRun
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) OrphanDependents(orphanDependents bool) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) PropagationPolicy(propagationPolicy string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) Body(body V1DeleteOptions) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) Execute() (*V1Status, *http.Response, error) {
	return r.ApiService.DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusExecute(r)
}

/*
DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus Method for DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus

delete status of a ZooKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus(ctx context.Context, name string, namespace string) ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	return ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1Status
func (a *CloudStreamnativeIoV1alpha2ApiService) DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusExecute(r ApiDeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) (*V1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.DeleteCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersets/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.gracePeriodSeconds != nil {
		localVarQueryParams.Add("gracePeriodSeconds", parameterToString(*r.gracePeriodSeconds, ""))
	}
	if r.orphanDependents != nil {
		localVarQueryParams.Add("orphanDependents", parameterToString(*r.orphanDependents, ""))
	}
	if r.propagationPolicy != nil {
		localVarQueryParams.Add("propagationPolicy", parameterToString(*r.propagationPolicy, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCloudStreamnativeIoV1alpha2APIResourcesRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
}

func (r ApiGetCloudStreamnativeIoV1alpha2APIResourcesRequest) Execute() (*V1APIResourceList, *http.Response, error) {
	return r.ApiService.GetCloudStreamnativeIoV1alpha2APIResourcesExecute(r)
}

/*
GetCloudStreamnativeIoV1alpha2APIResources Method for GetCloudStreamnativeIoV1alpha2APIResources

get available resources

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCloudStreamnativeIoV1alpha2APIResourcesRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) GetCloudStreamnativeIoV1alpha2APIResources(ctx context.Context) ApiGetCloudStreamnativeIoV1alpha2APIResourcesRequest {
	return ApiGetCloudStreamnativeIoV1alpha2APIResourcesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1APIResourceList
func (a *CloudStreamnativeIoV1alpha2ApiService) GetCloudStreamnativeIoV1alpha2APIResourcesExecute(r ApiGetCloudStreamnativeIoV1alpha2APIResourcesRequest) (*V1APIResourceList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1APIResourceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.GetCloudStreamnativeIoV1alpha2APIResources")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	pretty *string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Pretty(pretty string) ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.pretty = &pretty
	return r
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Continue_(continue_ string) ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) FieldSelector(fieldSelector string) ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) LabelSelector(labelSelector string) ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Limit(limit int32) ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.limit = &limit
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) ResourceVersion(resourceVersion string) ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) TimeoutSeconds(timeoutSeconds int32) ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Watch(watch bool) ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.watch = &watch
	return r
}

func (r ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscriptionList, *http.Response, error) {
	return r.ApiService.ListCloudStreamnativeIoV1alpha2AWSSubscriptionExecute(r)
}

/*
ListCloudStreamnativeIoV1alpha2AWSSubscription Method for ListCloudStreamnativeIoV1alpha2AWSSubscription

list or watch objects of kind AWSSubscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2AWSSubscription(ctx context.Context) ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	return ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscriptionList
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2AWSSubscriptionExecute(r ApiListCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscriptionList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscriptionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ListCloudStreamnativeIoV1alpha2AWSSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/awssubscriptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest) Continue_(continue_ string) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest) FieldSelector(fieldSelector string) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest) LabelSelector(labelSelector string) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest) Limit(limit int32) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest) Pretty(pretty string) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest) ResourceVersion(resourceVersion string) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest) TimeoutSeconds(timeoutSeconds int32) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest) Watch(watch bool) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest {
	r.watch = &watch
	return r
}

func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetList, *http.Response, error) {
	return r.ApiService.ListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesExecute(r)
}

/*
ListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespaces Method for ListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespaces

list or watch objects of kind BookKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespaces(ctx context.Context) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest {
	return ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetList
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesExecute(r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespacesRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ListCloudStreamnativeIoV1alpha2BookKeeperSetForAllNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/bookkeepersets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest) Continue_(continue_ string) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest) FieldSelector(fieldSelector string) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest) LabelSelector(labelSelector string) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest) Limit(limit int32) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest) Pretty(pretty string) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest) ResourceVersion(resourceVersion string) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest) TimeoutSeconds(timeoutSeconds int32) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest) Watch(watch bool) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest {
	r.watch = &watch
	return r
}

func (r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOptionList, *http.Response, error) {
	return r.ApiService.ListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesExecute(r)
}

/*
ListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespaces Method for ListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespaces

list or watch objects of kind BookKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespaces(ctx context.Context) ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest {
	return ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOptionList
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesExecute(r ApiListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespacesRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOptionList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOptionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ListCloudStreamnativeIoV1alpha2BookKeeperSetOptionForAllNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/bookkeepersetoptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest) Continue_(continue_ string) ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest) FieldSelector(fieldSelector string) ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest) LabelSelector(labelSelector string) ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest) Limit(limit int32) ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest) Pretty(pretty string) ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest) ResourceVersion(resourceVersion string) ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest) TimeoutSeconds(timeoutSeconds int32) ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest) Watch(watch bool) ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest {
	r.watch = &watch
	return r
}

func (r ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSetList, *http.Response, error) {
	return r.ApiService.ListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesExecute(r)
}

/*
ListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespaces Method for ListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespaces

list or watch objects of kind MonitorSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespaces(ctx context.Context) ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest {
	return ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSetList
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesExecute(r ApiListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespacesRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSetList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSetList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ListCloudStreamnativeIoV1alpha2MonitorSetForAllNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/monitorsets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	namespace string
	pretty *string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Pretty(pretty string) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.pretty = &pretty
	return r
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Continue_(continue_ string) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) FieldSelector(fieldSelector string) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) LabelSelector(labelSelector string) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Limit(limit int32) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.limit = &limit
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) ResourceVersion(resourceVersion string) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) TimeoutSeconds(timeoutSeconds int32) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Watch(watch bool) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.watch = &watch
	return r
}

func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetList, *http.Response, error) {
	return r.ApiService.ListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetExecute(r)
}

/*
ListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet Method for ListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet

list or watch objects of kind BookKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet(ctx context.Context, namespace string) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	return ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetList
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetExecute(r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersets"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	namespace string
	pretty *string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Pretty(pretty string) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.pretty = &pretty
	return r
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Continue_(continue_ string) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) FieldSelector(fieldSelector string) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) LabelSelector(labelSelector string) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Limit(limit int32) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.limit = &limit
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) ResourceVersion(resourceVersion string) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) TimeoutSeconds(timeoutSeconds int32) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Watch(watch bool) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.watch = &watch
	return r
}

func (r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOptionList, *http.Response, error) {
	return r.ApiService.ListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionExecute(r)
}

/*
ListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption Method for ListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption

list or watch objects of kind BookKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption(ctx context.Context, namespace string) ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	return ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOptionList
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionExecute(r ApiListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOptionList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOptionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ListCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersetoptions"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	namespace string
	pretty *string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Pretty(pretty string) ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.pretty = &pretty
	return r
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Continue_(continue_ string) ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) FieldSelector(fieldSelector string) ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) LabelSelector(labelSelector string) ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Limit(limit int32) ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.limit = &limit
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) ResourceVersion(resourceVersion string) ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) TimeoutSeconds(timeoutSeconds int32) ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Watch(watch bool) ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.watch = &watch
	return r
}

func (r ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSetList, *http.Response, error) {
	return r.ApiService.ListCloudStreamnativeIoV1alpha2NamespacedMonitorSetExecute(r)
}

/*
ListCloudStreamnativeIoV1alpha2NamespacedMonitorSet Method for ListCloudStreamnativeIoV1alpha2NamespacedMonitorSet

list or watch objects of kind MonitorSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2NamespacedMonitorSet(ctx context.Context, namespace string) ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	return ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSetList
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2NamespacedMonitorSetExecute(r ApiListCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSetList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSetList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ListCloudStreamnativeIoV1alpha2NamespacedMonitorSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/monitorsets"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	namespace string
	pretty *string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Pretty(pretty string) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.pretty = &pretty
	return r
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Continue_(continue_ string) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) FieldSelector(fieldSelector string) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) LabelSelector(labelSelector string) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Limit(limit int32) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.limit = &limit
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) ResourceVersion(resourceVersion string) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) TimeoutSeconds(timeoutSeconds int32) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Watch(watch bool) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.watch = &watch
	return r
}

func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetList, *http.Response, error) {
	return r.ApiService.ListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetExecute(r)
}

/*
ListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet Method for ListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet

list or watch objects of kind ZooKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet(ctx context.Context, namespace string) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	return ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetList
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetExecute(r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersets"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	namespace string
	pretty *string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Pretty(pretty string) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.pretty = &pretty
	return r
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Continue_(continue_ string) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) FieldSelector(fieldSelector string) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) LabelSelector(labelSelector string) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Limit(limit int32) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.limit = &limit
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) ResourceVersion(resourceVersion string) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) TimeoutSeconds(timeoutSeconds int32) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Watch(watch bool) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.watch = &watch
	return r
}

func (r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOptionList, *http.Response, error) {
	return r.ApiService.ListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionExecute(r)
}

/*
ListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption Method for ListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption

list or watch objects of kind ZooKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption(ctx context.Context, namespace string) ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	return ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOptionList
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionExecute(r ApiListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOptionList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOptionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ListCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersetoptions"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest) Continue_(continue_ string) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest) FieldSelector(fieldSelector string) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest) LabelSelector(labelSelector string) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest) Limit(limit int32) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest) Pretty(pretty string) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest) ResourceVersion(resourceVersion string) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest) TimeoutSeconds(timeoutSeconds int32) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest) Watch(watch bool) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest {
	r.watch = &watch
	return r
}

func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetList, *http.Response, error) {
	return r.ApiService.ListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesExecute(r)
}

/*
ListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespaces Method for ListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespaces

list or watch objects of kind ZooKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespaces(ctx context.Context) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest {
	return ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetList
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesExecute(r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespacesRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ListCloudStreamnativeIoV1alpha2ZooKeeperSetForAllNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/zookeepersets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest) Continue_(continue_ string) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest) FieldSelector(fieldSelector string) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest) LabelSelector(labelSelector string) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest) Limit(limit int32) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest) Pretty(pretty string) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest) ResourceVersion(resourceVersion string) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest) TimeoutSeconds(timeoutSeconds int32) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest) Watch(watch bool) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest {
	r.watch = &watch
	return r
}

func (r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOptionList, *http.Response, error) {
	return r.ApiService.ListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesExecute(r)
}

/*
ListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespaces Method for ListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespaces

list or watch objects of kind ZooKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespaces(ctx context.Context) ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest {
	return ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOptionList
func (a *CloudStreamnativeIoV1alpha2ApiService) ListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesExecute(r ApiListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespacesRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOptionList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOptionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ListCloudStreamnativeIoV1alpha2ZooKeeperSetOptionForAllNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/zookeepersetoptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	force *bool
}

func (r ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Body(body map[string]interface{}) ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Pretty(pretty string) ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) DryRun(dryRun string) ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) FieldManager(fieldManager string) ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.fieldManager = &fieldManager
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Force(force bool) ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.force = &force
	return r
}

func (r ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription, *http.Response, error) {
	return r.ApiService.PatchCloudStreamnativeIoV1alpha2AWSSubscriptionExecute(r)
}

/*
PatchCloudStreamnativeIoV1alpha2AWSSubscription Method for PatchCloudStreamnativeIoV1alpha2AWSSubscription

partially update the specified AWSSubscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the AWSSubscription
 @return ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2AWSSubscription(ctx context.Context, name string) ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	return ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2AWSSubscriptionExecute(r ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.PatchCloudStreamnativeIoV1alpha2AWSSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/awssubscriptions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	force *bool
}

func (r ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) Body(body map[string]interface{}) ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) Pretty(pretty string) ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) DryRun(dryRun string) ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) FieldManager(fieldManager string) ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) Force(force bool) ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.force = &force
	return r
}

func (r ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription, *http.Response, error) {
	return r.ApiService.PatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusExecute(r)
}

/*
PatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatus Method for PatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatus

partially update status of the specified AWSSubscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the AWSSubscription
 @return ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatus(ctx context.Context, name string) ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	return ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusExecute(r ApiPatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.PatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/awssubscriptions/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	force *bool
}

func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Body(body map[string]interface{}) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Pretty(pretty string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) DryRun(dryRun string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) FieldManager(fieldManager string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.fieldManager = &fieldManager
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Force(force bool) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.force = &force
	return r
}

func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet, *http.Response, error) {
	return r.ApiService.PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetExecute(r)
}

/*
PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet Method for PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet

partially update the specified BookKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet(ctx context.Context, name string, namespace string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	return ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetExecute(r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersets/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	force *bool
}

func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Body(body map[string]interface{}) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Pretty(pretty string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) DryRun(dryRun string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) FieldManager(fieldManager string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.fieldManager = &fieldManager
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Force(force bool) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.force = &force
	return r
}

func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption, *http.Response, error) {
	return r.ApiService.PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionExecute(r)
}

/*
PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption Method for PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption

partially update the specified BookKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption(ctx context.Context, name string, namespace string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	return ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionExecute(r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersetoptions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	force *bool
}

func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) Body(body map[string]interface{}) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) Pretty(pretty string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) DryRun(dryRun string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) FieldManager(fieldManager string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) Force(force bool) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.force = &force
	return r
}

func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption, *http.Response, error) {
	return r.ApiService.PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusExecute(r)
}

/*
PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus Method for PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus

partially update status of the specified BookKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus(ctx context.Context, name string, namespace string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	return ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusExecute(r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersetoptions/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	force *bool
}

func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) Body(body map[string]interface{}) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) Pretty(pretty string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) DryRun(dryRun string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) FieldManager(fieldManager string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) Force(force bool) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.force = &force
	return r
}

func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet, *http.Response, error) {
	return r.ApiService.PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusExecute(r)
}

/*
PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus Method for PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus

partially update status of the specified BookKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus(ctx context.Context, name string, namespace string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	return ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusExecute(r ApiPatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.PatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersets/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	force *bool
}

func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Body(body map[string]interface{}) ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Pretty(pretty string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) DryRun(dryRun string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) FieldManager(fieldManager string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.fieldManager = &fieldManager
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Force(force bool) ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.force = &force
	return r
}

func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet, *http.Response, error) {
	return r.ApiService.PatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetExecute(r)
}

/*
PatchCloudStreamnativeIoV1alpha2NamespacedMonitorSet Method for PatchCloudStreamnativeIoV1alpha2NamespacedMonitorSet

partially update the specified MonitorSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the MonitorSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2NamespacedMonitorSet(ctx context.Context, name string, namespace string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	return ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetExecute(r ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.PatchCloudStreamnativeIoV1alpha2NamespacedMonitorSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/monitorsets/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	force *bool
}

func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) Body(body map[string]interface{}) ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) Pretty(pretty string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) DryRun(dryRun string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) FieldManager(fieldManager string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) Force(force bool) ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.force = &force
	return r
}

func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet, *http.Response, error) {
	return r.ApiService.PatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusExecute(r)
}

/*
PatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus Method for PatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus

partially update status of the specified MonitorSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the MonitorSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus(ctx context.Context, name string, namespace string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	return ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusExecute(r ApiPatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.PatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/monitorsets/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	force *bool
}

func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Body(body map[string]interface{}) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Pretty(pretty string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) DryRun(dryRun string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) FieldManager(fieldManager string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.fieldManager = &fieldManager
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Force(force bool) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.force = &force
	return r
}

func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet, *http.Response, error) {
	return r.ApiService.PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetExecute(r)
}

/*
PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet Method for PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet

partially update the specified ZooKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet(ctx context.Context, name string, namespace string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	return ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetExecute(r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersets/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	force *bool
}

func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Body(body map[string]interface{}) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Pretty(pretty string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) DryRun(dryRun string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) FieldManager(fieldManager string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.fieldManager = &fieldManager
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Force(force bool) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.force = &force
	return r
}

func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption, *http.Response, error) {
	return r.ApiService.PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionExecute(r)
}

/*
PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption Method for PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption

partially update the specified ZooKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption(ctx context.Context, name string, namespace string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	return ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionExecute(r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersetoptions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	force *bool
}

func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) Body(body map[string]interface{}) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) Pretty(pretty string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) DryRun(dryRun string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) FieldManager(fieldManager string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) Force(force bool) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.force = &force
	return r
}

func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption, *http.Response, error) {
	return r.ApiService.PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusExecute(r)
}

/*
PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus Method for PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus

partially update status of the specified ZooKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus(ctx context.Context, name string, namespace string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	return ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusExecute(r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersetoptions/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	force *bool
}

func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) Body(body map[string]interface{}) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) Pretty(pretty string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) DryRun(dryRun string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) FieldManager(fieldManager string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) Force(force bool) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.force = &force
	return r
}

func (r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet, *http.Response, error) {
	return r.ApiService.PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusExecute(r)
}

/*
PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus Method for PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus

partially update status of the specified ZooKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus(ctx context.Context, name string, namespace string) ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	return ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet
func (a *CloudStreamnativeIoV1alpha2ApiService) PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusExecute(r ApiPatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.PatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersets/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadCloudStreamnativeIoV1alpha2AWSSubscriptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	pretty *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Pretty(pretty string) ApiReadCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.pretty = &pretty
	return r
}

func (r ApiReadCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription, *http.Response, error) {
	return r.ApiService.ReadCloudStreamnativeIoV1alpha2AWSSubscriptionExecute(r)
}

/*
ReadCloudStreamnativeIoV1alpha2AWSSubscription Method for ReadCloudStreamnativeIoV1alpha2AWSSubscription

read the specified AWSSubscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the AWSSubscription
 @return ApiReadCloudStreamnativeIoV1alpha2AWSSubscriptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2AWSSubscription(ctx context.Context, name string) ApiReadCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	return ApiReadCloudStreamnativeIoV1alpha2AWSSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2AWSSubscriptionExecute(r ApiReadCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReadCloudStreamnativeIoV1alpha2AWSSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/awssubscriptions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	pretty *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) Pretty(pretty string) ApiReadCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.pretty = &pretty
	return r
}

func (r ApiReadCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription, *http.Response, error) {
	return r.ApiService.ReadCloudStreamnativeIoV1alpha2AWSSubscriptionStatusExecute(r)
}

/*
ReadCloudStreamnativeIoV1alpha2AWSSubscriptionStatus Method for ReadCloudStreamnativeIoV1alpha2AWSSubscriptionStatus

read status of the specified AWSSubscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the AWSSubscription
 @return ApiReadCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2AWSSubscriptionStatus(ctx context.Context, name string) ApiReadCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	return ApiReadCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2AWSSubscriptionStatusExecute(r ApiReadCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReadCloudStreamnativeIoV1alpha2AWSSubscriptionStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/awssubscriptions/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	pretty *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Pretty(pretty string) ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.pretty = &pretty
	return r
}

func (r ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet, *http.Response, error) {
	return r.ApiService.ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetExecute(r)
}

/*
ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet Method for ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet

read the specified BookKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet(ctx context.Context, name string, namespace string) ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	return ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetExecute(r ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersets/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	pretty *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Pretty(pretty string) ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.pretty = &pretty
	return r
}

func (r ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption, *http.Response, error) {
	return r.ApiService.ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionExecute(r)
}

/*
ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption Method for ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption

read the specified BookKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption(ctx context.Context, name string, namespace string) ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	return ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionExecute(r ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersetoptions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	pretty *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) Pretty(pretty string) ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.pretty = &pretty
	return r
}

func (r ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption, *http.Response, error) {
	return r.ApiService.ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusExecute(r)
}

/*
ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus Method for ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus

read status of the specified BookKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus(ctx context.Context, name string, namespace string) ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	return ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusExecute(r ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersetoptions/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	pretty *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) Pretty(pretty string) ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.pretty = &pretty
	return r
}

func (r ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet, *http.Response, error) {
	return r.ApiService.ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusExecute(r)
}

/*
ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus Method for ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus

read status of the specified BookKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus(ctx context.Context, name string, namespace string) ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	return ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusExecute(r ApiReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReadCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersets/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	pretty *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Pretty(pretty string) ApiReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.pretty = &pretty
	return r
}

func (r ApiReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet, *http.Response, error) {
	return r.ApiService.ReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetExecute(r)
}

/*
ReadCloudStreamnativeIoV1alpha2NamespacedMonitorSet Method for ReadCloudStreamnativeIoV1alpha2NamespacedMonitorSet

read the specified MonitorSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the MonitorSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2NamespacedMonitorSet(ctx context.Context, name string, namespace string) ApiReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	return ApiReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetExecute(r ApiReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReadCloudStreamnativeIoV1alpha2NamespacedMonitorSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/monitorsets/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	pretty *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) Pretty(pretty string) ApiReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.pretty = &pretty
	return r
}

func (r ApiReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet, *http.Response, error) {
	return r.ApiService.ReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusExecute(r)
}

/*
ReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus Method for ReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus

read status of the specified MonitorSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the MonitorSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus(ctx context.Context, name string, namespace string) ApiReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	return ApiReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusExecute(r ApiReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReadCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/monitorsets/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	pretty *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Pretty(pretty string) ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.pretty = &pretty
	return r
}

func (r ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet, *http.Response, error) {
	return r.ApiService.ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetExecute(r)
}

/*
ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet Method for ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet

read the specified ZooKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet(ctx context.Context, name string, namespace string) ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	return ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetExecute(r ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersets/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	pretty *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Pretty(pretty string) ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.pretty = &pretty
	return r
}

func (r ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption, *http.Response, error) {
	return r.ApiService.ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionExecute(r)
}

/*
ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption Method for ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption

read the specified ZooKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption(ctx context.Context, name string, namespace string) ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	return ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionExecute(r ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersetoptions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	pretty *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) Pretty(pretty string) ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.pretty = &pretty
	return r
}

func (r ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption, *http.Response, error) {
	return r.ApiService.ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusExecute(r)
}

/*
ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus Method for ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus

read status of the specified ZooKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus(ctx context.Context, name string, namespace string) ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	return ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusExecute(r ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersetoptions/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	pretty *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) Pretty(pretty string) ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.pretty = &pretty
	return r
}

func (r ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet, *http.Response, error) {
	return r.ApiService.ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusExecute(r)
}

/*
ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus Method for ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus

read status of the specified ZooKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus(ctx context.Context, name string, namespace string) ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	return ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet
func (a *CloudStreamnativeIoV1alpha2ApiService) ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusExecute(r ApiReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReadCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersets/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription) ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Pretty(pretty string) ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) DryRun(dryRun string) ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) FieldManager(fieldManager string) ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription, *http.Response, error) {
	return r.ApiService.ReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionExecute(r)
}

/*
ReplaceCloudStreamnativeIoV1alpha2AWSSubscription Method for ReplaceCloudStreamnativeIoV1alpha2AWSSubscription

replace the specified AWSSubscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the AWSSubscription
 @return ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2AWSSubscription(ctx context.Context, name string) ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	return ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionExecute(r ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReplaceCloudStreamnativeIoV1alpha2AWSSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/awssubscriptions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription) ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) Pretty(pretty string) ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) DryRun(dryRun string) ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) FieldManager(fieldManager string) ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription, *http.Response, error) {
	return r.ApiService.ReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionStatusExecute(r)
}

/*
ReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionStatus Method for ReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionStatus

replace status of the specified AWSSubscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the AWSSubscription
 @return ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionStatus(ctx context.Context, name string) ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	return ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionStatusExecute(r ApiReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2AWSSubscription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReplaceCloudStreamnativeIoV1alpha2AWSSubscriptionStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/awssubscriptions/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Pretty(pretty string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) DryRun(dryRun string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) FieldManager(fieldManager string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet, *http.Response, error) {
	return r.ApiService.ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetExecute(r)
}

/*
ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet Method for ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet

replace the specified BookKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet(ctx context.Context, name string, namespace string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	return ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetExecute(r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersets/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Pretty(pretty string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) DryRun(dryRun string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) FieldManager(fieldManager string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption, *http.Response, error) {
	return r.ApiService.ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionExecute(r)
}

/*
ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption Method for ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption

replace the specified BookKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption(ctx context.Context, name string, namespace string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	return ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionExecute(r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersetoptions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) Pretty(pretty string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) DryRun(dryRun string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) FieldManager(fieldManager string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption, *http.Response, error) {
	return r.ApiService.ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusExecute(r)
}

/*
ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus Method for ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus

replace status of the specified BookKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus(ctx context.Context, name string, namespace string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	return ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusExecute(r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSetOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersetoptions/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) Pretty(pretty string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) DryRun(dryRun string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) FieldManager(fieldManager string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet, *http.Response, error) {
	return r.ApiService.ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusExecute(r)
}

/*
ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus Method for ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus

replace status of the specified BookKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus(ctx context.Context, name string, namespace string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	return ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusExecute(r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2BookKeeperSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReplaceCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/bookkeepersets/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Pretty(pretty string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) DryRun(dryRun string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) FieldManager(fieldManager string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet, *http.Response, error) {
	return r.ApiService.ReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetExecute(r)
}

/*
ReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSet Method for ReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSet

replace the specified MonitorSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the MonitorSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSet(ctx context.Context, name string, namespace string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	return ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetExecute(r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/monitorsets/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) Pretty(pretty string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) DryRun(dryRun string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) FieldManager(fieldManager string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet, *http.Response, error) {
	return r.ApiService.ReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusExecute(r)
}

/*
ReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus Method for ReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus

replace status of the specified MonitorSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the MonitorSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus(ctx context.Context, name string, namespace string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	return ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusExecute(r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2MonitorSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReplaceCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/monitorsets/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Pretty(pretty string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) DryRun(dryRun string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) FieldManager(fieldManager string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet, *http.Response, error) {
	return r.ApiService.ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetExecute(r)
}

/*
ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet Method for ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet

replace the specified ZooKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet(ctx context.Context, name string, namespace string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	return ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetExecute(r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersets/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Pretty(pretty string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) DryRun(dryRun string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) FieldManager(fieldManager string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption, *http.Response, error) {
	return r.ApiService.ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionExecute(r)
}

/*
ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption Method for ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption

replace the specified ZooKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption(ctx context.Context, name string, namespace string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	return ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionExecute(r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersetoptions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) Pretty(pretty string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) DryRun(dryRun string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) FieldManager(fieldManager string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption, *http.Response, error) {
	return r.ApiService.ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusExecute(r)
}

/*
ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus Method for ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus

replace status of the specified ZooKeeperSetOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus(ctx context.Context, name string, namespace string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	return ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusExecute(r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSetOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersetoptions/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	body *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet
	pretty *string
	dryRun *string
	fieldManager *string
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) Body(body ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) Pretty(pretty string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) DryRun(dryRun string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) FieldManager(fieldManager string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

func (r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) Execute() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet, *http.Response, error) {
	return r.ApiService.ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusExecute(r)
}

/*
ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus Method for ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus

replace status of the specified ZooKeeperSet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus(ctx context.Context, name string, namespace string) ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	return ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet
func (a *CloudStreamnativeIoV1alpha2ApiService) ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusExecute(r ApiReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha2ZooKeeperSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.ReplaceCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/namespaces/{namespace}/zookeepersets/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.dryRun != nil {
		localVarQueryParams.Add("dryRun", parameterToString(*r.dryRun, ""))
	}
	if r.fieldManager != nil {
		localVarQueryParams.Add("fieldManager", parameterToString(*r.fieldManager, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2AWSSubscriptionExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2AWSSubscription Method for WatchCloudStreamnativeIoV1alpha2AWSSubscription

watch changes to an object of kind AWSSubscription. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the AWSSubscription
 @return ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2AWSSubscription(ctx context.Context, name string) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2AWSSubscriptionExecute(r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2AWSSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/awssubscriptions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2AWSSubscriptionListExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2AWSSubscriptionList Method for WatchCloudStreamnativeIoV1alpha2AWSSubscriptionList

watch individual changes to a list of AWSSubscription. deprecated: use the 'watch' parameter with a list operation instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2AWSSubscriptionList(ctx context.Context) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2AWSSubscriptionListExecute(r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionListRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2AWSSubscriptionList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/awssubscriptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatus Method for WatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatus

watch changes to status of an object of kind AWSSubscription. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the AWSSubscription
 @return ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatus(ctx context.Context, name string) ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusExecute(r ApiWatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatusRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2AWSSubscriptionStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/awssubscriptions/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespaces Method for WatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespaces

watch individual changes to a list of BookKeeperSet. deprecated: use the 'watch' parameter with a list operation instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespaces(ctx context.Context) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesExecute(r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespacesRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2BookKeeperSetListForAllNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/bookkeepersets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespaces Method for WatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespaces

watch individual changes to a list of BookKeeperSetOption. deprecated: use the 'watch' parameter with a list operation instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespaces(ctx context.Context) ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesExecute(r ApiWatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespacesRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2BookKeeperSetOptionListForAllNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/bookkeepersetoptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespaces Method for WatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespaces

watch individual changes to a list of MonitorSet. deprecated: use the 'watch' parameter with a list operation instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespaces(ctx context.Context) ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesExecute(r ApiWatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespacesRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2MonitorSetListForAllNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/monitorsets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet Method for WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet

watch changes to an object of kind BookKeeperSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet(ctx context.Context, name string, namespace string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetExecute(r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/namespaces/{namespace}/bookkeepersets/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	namespace string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetList Method for WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetList

watch individual changes to a list of BookKeeperSet. deprecated: use the 'watch' parameter with a list operation instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetList(ctx context.Context, namespace string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListExecute(r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetListRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/namespaces/{namespace}/bookkeepersets"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption Method for WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption

watch changes to an object of kind BookKeeperSetOption. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption(ctx context.Context, name string, namespace string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionExecute(r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOption")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/namespaces/{namespace}/bookkeepersetoptions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	namespace string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionList Method for WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionList

watch individual changes to a list of BookKeeperSetOption. deprecated: use the 'watch' parameter with a list operation instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionList(ctx context.Context, namespace string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListExecute(r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionListRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/namespaces/{namespace}/bookkeepersetoptions"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus Method for WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus

watch changes to status of an object of kind BookKeeperSetOption. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus(ctx context.Context, name string, namespace string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusExecute(r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatusRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetOptionStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/namespaces/{namespace}/bookkeepersetoptions/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus Method for WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus

watch changes to status of an object of kind BookKeeperSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the BookKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus(ctx context.Context, name string, namespace string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusExecute(r ApiWatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatusRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedBookKeeperSetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/namespaces/{namespace}/bookkeepersets/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2NamespacedMonitorSet Method for WatchCloudStreamnativeIoV1alpha2NamespacedMonitorSet

watch changes to an object of kind MonitorSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the MonitorSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedMonitorSet(ctx context.Context, name string, namespace string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetExecute(r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedMonitorSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/namespaces/{namespace}/monitorsets/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	namespace string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetList Method for WatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetList

watch individual changes to a list of MonitorSet. deprecated: use the 'watch' parameter with a list operation instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetList(ctx context.Context, namespace string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListExecute(r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetListRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/namespaces/{namespace}/monitorsets"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus Method for WatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus

watch changes to status of an object of kind MonitorSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the MonitorSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus(ctx context.Context, name string, namespace string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusExecute(r ApiWatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatusRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedMonitorSetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/namespaces/{namespace}/monitorsets/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet Method for WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet

watch changes to an object of kind ZooKeeperSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet(ctx context.Context, name string, namespace string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetExecute(r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/namespaces/{namespace}/zookeepersets/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	namespace string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetList Method for WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetList

watch individual changes to a list of ZooKeeperSet. deprecated: use the 'watch' parameter with a list operation instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetList(ctx context.Context, namespace string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListExecute(r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetListRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/namespaces/{namespace}/zookeepersets"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption Method for WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption

watch changes to an object of kind ZooKeeperSetOption. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption(ctx context.Context, name string, namespace string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionExecute(r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOption")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/namespaces/{namespace}/zookeepersetoptions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	namespace string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionList Method for WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionList

watch individual changes to a list of ZooKeeperSetOption. deprecated: use the 'watch' parameter with a list operation instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionList(ctx context.Context, namespace string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListExecute(r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionListRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/namespaces/{namespace}/zookeepersetoptions"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus Method for WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus

watch changes to status of an object of kind ZooKeeperSetOption. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSetOption
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus(ctx context.Context, name string, namespace string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusExecute(r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatusRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetOptionStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/namespaces/{namespace}/zookeepersetoptions/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	name string
	namespace string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus Method for WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus

watch changes to status of an object of kind ZooKeeperSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ZooKeeperSet
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus(ctx context.Context, name string, namespace string) ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusExecute(r ApiWatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatusRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2NamespacedZooKeeperSetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/namespaces/{namespace}/zookeepersets/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespaces Method for WatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespaces

watch individual changes to a list of ZooKeeperSet. deprecated: use the 'watch' parameter with a list operation instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespaces(ctx context.Context) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesExecute(r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespacesRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2ZooKeeperSetListForAllNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/zookeepersets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest struct {
	ctx context.Context
	ApiService *CloudStreamnativeIoV1alpha2ApiService
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest) Continue_(continue_ string) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest) FieldSelector(fieldSelector string) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest) LabelSelector(labelSelector string) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest) Limit(limit int32) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest) Pretty(pretty string) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest) ResourceVersion(resourceVersion string) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest) Watch(watch bool) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest) Execute() (*V1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesExecute(r)
}

/*
WatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespaces Method for WatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespaces

watch individual changes to a list of ZooKeeperSetOption. deprecated: use the 'watch' parameter with a list operation instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest
*/
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespaces(ctx context.Context) ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest {
	return ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1WatchEvent
func (a *CloudStreamnativeIoV1alpha2ApiService) WatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesExecute(r ApiWatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespacesRequest) (*V1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudStreamnativeIoV1alpha2ApiService.WatchCloudStreamnativeIoV1alpha2ZooKeeperSetOptionListForAllNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/cloud.streamnative.io/v1alpha2/watch/zookeepersetoptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		localVarQueryParams.Add("allowWatchBookmarks", parameterToString(*r.allowWatchBookmarks, ""))
	}
	if r.continue_ != nil {
		localVarQueryParams.Add("continue", parameterToString(*r.continue_, ""))
	}
	if r.fieldSelector != nil {
		localVarQueryParams.Add("fieldSelector", parameterToString(*r.fieldSelector, ""))
	}
	if r.labelSelector != nil {
		localVarQueryParams.Add("labelSelector", parameterToString(*r.labelSelector, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.pretty != nil {
		localVarQueryParams.Add("pretty", parameterToString(*r.pretty, ""))
	}
	if r.resourceVersion != nil {
		localVarQueryParams.Add("resourceVersion", parameterToString(*r.resourceVersion, ""))
	}
	if r.resourceVersionMatch != nil {
		localVarQueryParams.Add("resourceVersionMatch", parameterToString(*r.resourceVersionMatch, ""))
	}
	if r.timeoutSeconds != nil {
		localVarQueryParams.Add("timeoutSeconds", parameterToString(*r.timeoutSeconds, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
