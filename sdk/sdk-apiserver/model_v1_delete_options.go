// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// V1DeleteOptions DeleteOptions may be provided when deleting an API object.
type V1DeleteOptions struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`
	// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
	DryRun []string `json:"dryRun,omitempty"`
	// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
	GracePeriodSeconds *int64 `json:"gracePeriodSeconds,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
	OrphanDependents *bool `json:"orphanDependents,omitempty"`
	Preconditions *V1Preconditions `json:"preconditions,omitempty"`
	// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
	PropagationPolicy *string `json:"propagationPolicy,omitempty"`
}

// NewV1DeleteOptions instantiates a new V1DeleteOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1DeleteOptions() *V1DeleteOptions {
	this := V1DeleteOptions{}
	return &this
}

// NewV1DeleteOptionsWithDefaults instantiates a new V1DeleteOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DeleteOptionsWithDefaults() *V1DeleteOptions {
	this := V1DeleteOptions{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *V1DeleteOptions) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeleteOptions) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *V1DeleteOptions) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *V1DeleteOptions) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetDryRun returns the DryRun field value if set, zero value otherwise.
func (o *V1DeleteOptions) GetDryRun() []string {
	if o == nil || o.DryRun == nil {
		var ret []string
		return ret
	}
	return o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeleteOptions) GetDryRunOk() ([]string, bool) {
	if o == nil || o.DryRun == nil {
		return nil, false
	}
	return o.DryRun, true
}

// HasDryRun returns a boolean if a field has been set.
func (o *V1DeleteOptions) HasDryRun() bool {
	if o != nil && o.DryRun != nil {
		return true
	}

	return false
}

// SetDryRun gets a reference to the given []string and assigns it to the DryRun field.
func (o *V1DeleteOptions) SetDryRun(v []string) {
	o.DryRun = v
}

// GetGracePeriodSeconds returns the GracePeriodSeconds field value if set, zero value otherwise.
func (o *V1DeleteOptions) GetGracePeriodSeconds() int64 {
	if o == nil || o.GracePeriodSeconds == nil {
		var ret int64
		return ret
	}
	return *o.GracePeriodSeconds
}

// GetGracePeriodSecondsOk returns a tuple with the GracePeriodSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeleteOptions) GetGracePeriodSecondsOk() (*int64, bool) {
	if o == nil || o.GracePeriodSeconds == nil {
		return nil, false
	}
	return o.GracePeriodSeconds, true
}

// HasGracePeriodSeconds returns a boolean if a field has been set.
func (o *V1DeleteOptions) HasGracePeriodSeconds() bool {
	if o != nil && o.GracePeriodSeconds != nil {
		return true
	}

	return false
}

// SetGracePeriodSeconds gets a reference to the given int64 and assigns it to the GracePeriodSeconds field.
func (o *V1DeleteOptions) SetGracePeriodSeconds(v int64) {
	o.GracePeriodSeconds = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *V1DeleteOptions) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeleteOptions) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *V1DeleteOptions) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *V1DeleteOptions) SetKind(v string) {
	o.Kind = &v
}

// GetOrphanDependents returns the OrphanDependents field value if set, zero value otherwise.
func (o *V1DeleteOptions) GetOrphanDependents() bool {
	if o == nil || o.OrphanDependents == nil {
		var ret bool
		return ret
	}
	return *o.OrphanDependents
}

// GetOrphanDependentsOk returns a tuple with the OrphanDependents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeleteOptions) GetOrphanDependentsOk() (*bool, bool) {
	if o == nil || o.OrphanDependents == nil {
		return nil, false
	}
	return o.OrphanDependents, true
}

// HasOrphanDependents returns a boolean if a field has been set.
func (o *V1DeleteOptions) HasOrphanDependents() bool {
	if o != nil && o.OrphanDependents != nil {
		return true
	}

	return false
}

// SetOrphanDependents gets a reference to the given bool and assigns it to the OrphanDependents field.
func (o *V1DeleteOptions) SetOrphanDependents(v bool) {
	o.OrphanDependents = &v
}

// GetPreconditions returns the Preconditions field value if set, zero value otherwise.
func (o *V1DeleteOptions) GetPreconditions() V1Preconditions {
	if o == nil || o.Preconditions == nil {
		var ret V1Preconditions
		return ret
	}
	return *o.Preconditions
}

// GetPreconditionsOk returns a tuple with the Preconditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeleteOptions) GetPreconditionsOk() (*V1Preconditions, bool) {
	if o == nil || o.Preconditions == nil {
		return nil, false
	}
	return o.Preconditions, true
}

// HasPreconditions returns a boolean if a field has been set.
func (o *V1DeleteOptions) HasPreconditions() bool {
	if o != nil && o.Preconditions != nil {
		return true
	}

	return false
}

// SetPreconditions gets a reference to the given V1Preconditions and assigns it to the Preconditions field.
func (o *V1DeleteOptions) SetPreconditions(v V1Preconditions) {
	o.Preconditions = &v
}

// GetPropagationPolicy returns the PropagationPolicy field value if set, zero value otherwise.
func (o *V1DeleteOptions) GetPropagationPolicy() string {
	if o == nil || o.PropagationPolicy == nil {
		var ret string
		return ret
	}
	return *o.PropagationPolicy
}

// GetPropagationPolicyOk returns a tuple with the PropagationPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeleteOptions) GetPropagationPolicyOk() (*string, bool) {
	if o == nil || o.PropagationPolicy == nil {
		return nil, false
	}
	return o.PropagationPolicy, true
}

// HasPropagationPolicy returns a boolean if a field has been set.
func (o *V1DeleteOptions) HasPropagationPolicy() bool {
	if o != nil && o.PropagationPolicy != nil {
		return true
	}

	return false
}

// SetPropagationPolicy gets a reference to the given string and assigns it to the PropagationPolicy field.
func (o *V1DeleteOptions) SetPropagationPolicy(v string) {
	o.PropagationPolicy = &v
}

func (o V1DeleteOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if o.DryRun != nil {
		toSerialize["dryRun"] = o.DryRun
	}
	if o.GracePeriodSeconds != nil {
		toSerialize["gracePeriodSeconds"] = o.GracePeriodSeconds
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.OrphanDependents != nil {
		toSerialize["orphanDependents"] = o.OrphanDependents
	}
	if o.Preconditions != nil {
		toSerialize["preconditions"] = o.Preconditions
	}
	if o.PropagationPolicy != nil {
		toSerialize["propagationPolicy"] = o.PropagationPolicy
	}
	return json.Marshal(toSerialize)
}

type NullableV1DeleteOptions struct {
	value *V1DeleteOptions
	isSet bool
}

func (v NullableV1DeleteOptions) Get() *V1DeleteOptions {
	return v.value
}

func (v *NullableV1DeleteOptions) Set(val *V1DeleteOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DeleteOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DeleteOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DeleteOptions(val *V1DeleteOptions) *NullableV1DeleteOptions {
	return &NullableV1DeleteOptions{value: val, isSet: true}
}

func (v NullableV1DeleteOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DeleteOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


