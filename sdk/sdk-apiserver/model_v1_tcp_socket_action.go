// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// V1TCPSocketAction TCPSocketAction describes an action based on opening a socket
type V1TCPSocketAction struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `json:"host,omitempty"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port map[string]interface{} `json:"port"`
}

// NewV1TCPSocketAction instantiates a new V1TCPSocketAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1TCPSocketAction(port map[string]interface{}) *V1TCPSocketAction {
	this := V1TCPSocketAction{}
	this.Port = port
	return &this
}

// NewV1TCPSocketActionWithDefaults instantiates a new V1TCPSocketAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1TCPSocketActionWithDefaults() *V1TCPSocketAction {
	this := V1TCPSocketAction{}
	return &this
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *V1TCPSocketAction) GetHost() string {
	if o == nil || o.Host == nil {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TCPSocketAction) GetHostOk() (*string, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *V1TCPSocketAction) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *V1TCPSocketAction) SetHost(v string) {
	o.Host = &v
}

// GetPort returns the Port field value
func (o *V1TCPSocketAction) GetPort() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *V1TCPSocketAction) GetPortOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Port, true
}

// SetPort sets field value
func (o *V1TCPSocketAction) SetPort(v map[string]interface{}) {
	o.Port = v
}

func (o V1TCPSocketAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Host != nil {
		toSerialize["host"] = o.Host
	}
	if true {
		toSerialize["port"] = o.Port
	}
	return json.Marshal(toSerialize)
}

type NullableV1TCPSocketAction struct {
	value *V1TCPSocketAction
	isSet bool
}

func (v NullableV1TCPSocketAction) Get() *V1TCPSocketAction {
	return v.value
}

func (v *NullableV1TCPSocketAction) Set(val *V1TCPSocketAction) {
	v.value = val
	v.isSet = true
}

func (v NullableV1TCPSocketAction) IsSet() bool {
	return v.isSet
}

func (v *NullableV1TCPSocketAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1TCPSocketAction(val *V1TCPSocketAction) *NullableV1TCPSocketAction {
	return &NullableV1TCPSocketAction{value: val, isSet: true}
}

func (v NullableV1TCPSocketAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1TCPSocketAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


