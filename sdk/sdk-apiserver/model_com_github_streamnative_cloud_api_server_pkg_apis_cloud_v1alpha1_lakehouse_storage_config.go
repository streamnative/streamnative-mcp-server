// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig struct for ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig
type ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig struct {
	CatalogConnectionUrl string `json:"catalogConnectionUrl"`
	// todo: maybe we need to support mount secrets as the catalog credentials?
	CatalogCredentials string `json:"catalogCredentials"`
	CatalogType *string `json:"catalogType,omitempty"`
	CatalogWarehouse string `json:"catalogWarehouse"`
	LakehouseType *string `json:"lakehouseType,omitempty"`
}

// NewComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig instantiates a new ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig(catalogConnectionUrl string, catalogCredentials string, catalogWarehouse string) *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig {
	this := ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig{}
	this.CatalogConnectionUrl = catalogConnectionUrl
	this.CatalogCredentials = catalogCredentials
	this.CatalogWarehouse = catalogWarehouse
	return &this
}

// NewComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfigWithDefaults instantiates a new ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfigWithDefaults() *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig {
	this := ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig{}
	return &this
}

// GetCatalogConnectionUrl returns the CatalogConnectionUrl field value
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) GetCatalogConnectionUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CatalogConnectionUrl
}

// GetCatalogConnectionUrlOk returns a tuple with the CatalogConnectionUrl field value
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) GetCatalogConnectionUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogConnectionUrl, true
}

// SetCatalogConnectionUrl sets field value
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) SetCatalogConnectionUrl(v string) {
	o.CatalogConnectionUrl = v
}

// GetCatalogCredentials returns the CatalogCredentials field value
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) GetCatalogCredentials() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CatalogCredentials
}

// GetCatalogCredentialsOk returns a tuple with the CatalogCredentials field value
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) GetCatalogCredentialsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogCredentials, true
}

// SetCatalogCredentials sets field value
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) SetCatalogCredentials(v string) {
	o.CatalogCredentials = v
}

// GetCatalogType returns the CatalogType field value if set, zero value otherwise.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) GetCatalogType() string {
	if o == nil || o.CatalogType == nil {
		var ret string
		return ret
	}
	return *o.CatalogType
}

// GetCatalogTypeOk returns a tuple with the CatalogType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) GetCatalogTypeOk() (*string, bool) {
	if o == nil || o.CatalogType == nil {
		return nil, false
	}
	return o.CatalogType, true
}

// HasCatalogType returns a boolean if a field has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) HasCatalogType() bool {
	if o != nil && o.CatalogType != nil {
		return true
	}

	return false
}

// SetCatalogType gets a reference to the given string and assigns it to the CatalogType field.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) SetCatalogType(v string) {
	o.CatalogType = &v
}

// GetCatalogWarehouse returns the CatalogWarehouse field value
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) GetCatalogWarehouse() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CatalogWarehouse
}

// GetCatalogWarehouseOk returns a tuple with the CatalogWarehouse field value
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) GetCatalogWarehouseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogWarehouse, true
}

// SetCatalogWarehouse sets field value
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) SetCatalogWarehouse(v string) {
	o.CatalogWarehouse = v
}

// GetLakehouseType returns the LakehouseType field value if set, zero value otherwise.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) GetLakehouseType() string {
	if o == nil || o.LakehouseType == nil {
		var ret string
		return ret
	}
	return *o.LakehouseType
}

// GetLakehouseTypeOk returns a tuple with the LakehouseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) GetLakehouseTypeOk() (*string, bool) {
	if o == nil || o.LakehouseType == nil {
		return nil, false
	}
	return o.LakehouseType, true
}

// HasLakehouseType returns a boolean if a field has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) HasLakehouseType() bool {
	if o != nil && o.LakehouseType != nil {
		return true
	}

	return false
}

// SetLakehouseType gets a reference to the given string and assigns it to the LakehouseType field.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) SetLakehouseType(v string) {
	o.LakehouseType = &v
}

func (o ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["catalogConnectionUrl"] = o.CatalogConnectionUrl
	}
	if true {
		toSerialize["catalogCredentials"] = o.CatalogCredentials
	}
	if o.CatalogType != nil {
		toSerialize["catalogType"] = o.CatalogType
	}
	if true {
		toSerialize["catalogWarehouse"] = o.CatalogWarehouse
	}
	if o.LakehouseType != nil {
		toSerialize["lakehouseType"] = o.LakehouseType
	}
	return json.Marshal(toSerialize)
}

type NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig struct {
	value *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig
	isSet bool
}

func (v NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) Get() *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig {
	return v.value
}

func (v *NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) Set(val *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig(val *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) *NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig {
	return &NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig{value: val, isSet: true}
}

func (v NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1LakehouseStorageConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


