//
// Copyright Â© 2023-2024 StreamNative Inc.
//

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec PulsarInstanceSpec defines the desired state of PulsarInstance
type ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec struct {
	Auth *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceAuth `json:"auth,omitempty"`
	// AvailabilityMode decides whether pods of the same type in pulsar should be in one zone or multiple zones
	AvailabilityMode string `json:"availabilityMode"`
	// Plan is the subscription plan, will create a stripe subscription if not empty deprecated: 1.16
	Plan *string `json:"plan,omitempty"`
	PoolRef *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PoolRef `json:"poolRef,omitempty"`
	// Type defines the instance specialization type: - standard: a standard deployment of Pulsar, BookKeeper, and ZooKeeper. - dedicated: a dedicated deployment of classic engine or ursa engine. - serverless: a serverless deployment of Pulsar, shared BookKeeper, and shared oxia. - byoc: bring your own cloud.
	Type *string `json:"type,omitempty"`
}

// NewComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec instantiates a new ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec(availabilityMode string) *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec {
	this := ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec{}
	this.AvailabilityMode = availabilityMode
	return &this
}

// NewComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpecWithDefaults instantiates a new ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpecWithDefaults() *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec {
	this := ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec{}
	return &this
}

// GetAuth returns the Auth field value if set, zero value otherwise.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) GetAuth() ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceAuth {
	if o == nil || o.Auth == nil {
		var ret ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceAuth
		return ret
	}
	return *o.Auth
}

// GetAuthOk returns a tuple with the Auth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) GetAuthOk() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceAuth, bool) {
	if o == nil || o.Auth == nil {
		return nil, false
	}
	return o.Auth, true
}

// HasAuth returns a boolean if a field has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) HasAuth() bool {
	if o != nil && o.Auth != nil {
		return true
	}

	return false
}

// SetAuth gets a reference to the given ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceAuth and assigns it to the Auth field.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) SetAuth(v ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceAuth) {
	o.Auth = &v
}

// GetAvailabilityMode returns the AvailabilityMode field value
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) GetAvailabilityMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvailabilityMode
}

// GetAvailabilityModeOk returns a tuple with the AvailabilityMode field value
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) GetAvailabilityModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailabilityMode, true
}

// SetAvailabilityMode sets field value
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) SetAvailabilityMode(v string) {
	o.AvailabilityMode = v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) GetPlan() string {
	if o == nil || o.Plan == nil {
		var ret string
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) GetPlanOk() (*string, bool) {
	if o == nil || o.Plan == nil {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) HasPlan() bool {
	if o != nil && o.Plan != nil {
		return true
	}

	return false
}

// SetPlan gets a reference to the given string and assigns it to the Plan field.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) SetPlan(v string) {
	o.Plan = &v
}

// GetPoolRef returns the PoolRef field value if set, zero value otherwise.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) GetPoolRef() ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PoolRef {
	if o == nil || o.PoolRef == nil {
		var ret ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PoolRef
		return ret
	}
	return *o.PoolRef
}

// GetPoolRefOk returns a tuple with the PoolRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) GetPoolRefOk() (*ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PoolRef, bool) {
	if o == nil || o.PoolRef == nil {
		return nil, false
	}
	return o.PoolRef, true
}

// HasPoolRef returns a boolean if a field has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) HasPoolRef() bool {
	if o != nil && o.PoolRef != nil {
		return true
	}

	return false
}

// SetPoolRef gets a reference to the given ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PoolRef and assigns it to the PoolRef field.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) SetPoolRef(v ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PoolRef) {
	o.PoolRef = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) SetType(v string) {
	o.Type = &v
}

func (o ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Auth != nil {
		toSerialize["auth"] = o.Auth
	}
	if true {
		toSerialize["availabilityMode"] = o.AvailabilityMode
	}
	if o.Plan != nil {
		toSerialize["plan"] = o.Plan
	}
	if o.PoolRef != nil {
		toSerialize["poolRef"] = o.PoolRef
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec struct {
	value *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec
	isSet bool
}

func (v NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) Get() *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec {
	return v.value
}

func (v *NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) Set(val *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec(val *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) *NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec {
	return &NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec{value: val, isSet: true}
}

func (v NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1PulsarInstanceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


