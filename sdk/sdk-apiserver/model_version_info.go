//
// Copyright Â© 2023-2024 StreamNative Inc.
//

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// VersionInfo Info contains versioning information. how we'll want to distribute that information.
type VersionInfo struct {
	BuildDate string `json:"buildDate"`
	Compiler string `json:"compiler"`
	GitCommit string `json:"gitCommit"`
	GitTreeState string `json:"gitTreeState"`
	GitVersion string `json:"gitVersion"`
	GoVersion string `json:"goVersion"`
	Major string `json:"major"`
	Minor string `json:"minor"`
	Platform string `json:"platform"`
}

// NewVersionInfo instantiates a new VersionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionInfo(buildDate string, compiler string, gitCommit string, gitTreeState string, gitVersion string, goVersion string, major string, minor string, platform string) *VersionInfo {
	this := VersionInfo{}
	this.BuildDate = buildDate
	this.Compiler = compiler
	this.GitCommit = gitCommit
	this.GitTreeState = gitTreeState
	this.GitVersion = gitVersion
	this.GoVersion = goVersion
	this.Major = major
	this.Minor = minor
	this.Platform = platform
	return &this
}

// NewVersionInfoWithDefaults instantiates a new VersionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionInfoWithDefaults() *VersionInfo {
	this := VersionInfo{}
	return &this
}

// GetBuildDate returns the BuildDate field value
func (o *VersionInfo) GetBuildDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BuildDate
}

// GetBuildDateOk returns a tuple with the BuildDate field value
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetBuildDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuildDate, true
}

// SetBuildDate sets field value
func (o *VersionInfo) SetBuildDate(v string) {
	o.BuildDate = v
}

// GetCompiler returns the Compiler field value
func (o *VersionInfo) GetCompiler() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Compiler
}

// GetCompilerOk returns a tuple with the Compiler field value
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetCompilerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Compiler, true
}

// SetCompiler sets field value
func (o *VersionInfo) SetCompiler(v string) {
	o.Compiler = v
}

// GetGitCommit returns the GitCommit field value
func (o *VersionInfo) GetGitCommit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitCommit
}

// GetGitCommitOk returns a tuple with the GitCommit field value
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetGitCommitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitCommit, true
}

// SetGitCommit sets field value
func (o *VersionInfo) SetGitCommit(v string) {
	o.GitCommit = v
}

// GetGitTreeState returns the GitTreeState field value
func (o *VersionInfo) GetGitTreeState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitTreeState
}

// GetGitTreeStateOk returns a tuple with the GitTreeState field value
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetGitTreeStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitTreeState, true
}

// SetGitTreeState sets field value
func (o *VersionInfo) SetGitTreeState(v string) {
	o.GitTreeState = v
}

// GetGitVersion returns the GitVersion field value
func (o *VersionInfo) GetGitVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitVersion
}

// GetGitVersionOk returns a tuple with the GitVersion field value
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetGitVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitVersion, true
}

// SetGitVersion sets field value
func (o *VersionInfo) SetGitVersion(v string) {
	o.GitVersion = v
}

// GetGoVersion returns the GoVersion field value
func (o *VersionInfo) GetGoVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GoVersion
}

// GetGoVersionOk returns a tuple with the GoVersion field value
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetGoVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GoVersion, true
}

// SetGoVersion sets field value
func (o *VersionInfo) SetGoVersion(v string) {
	o.GoVersion = v
}

// GetMajor returns the Major field value
func (o *VersionInfo) GetMajor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Major
}

// GetMajorOk returns a tuple with the Major field value
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetMajorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Major, true
}

// SetMajor sets field value
func (o *VersionInfo) SetMajor(v string) {
	o.Major = v
}

// GetMinor returns the Minor field value
func (o *VersionInfo) GetMinor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Minor
}

// GetMinorOk returns a tuple with the Minor field value
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetMinorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Minor, true
}

// SetMinor sets field value
func (o *VersionInfo) SetMinor(v string) {
	o.Minor = v
}

// GetPlatform returns the Platform field value
func (o *VersionInfo) GetPlatform() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetPlatformOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Platform, true
}

// SetPlatform sets field value
func (o *VersionInfo) SetPlatform(v string) {
	o.Platform = v
}

func (o VersionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["buildDate"] = o.BuildDate
	}
	if true {
		toSerialize["compiler"] = o.Compiler
	}
	if true {
		toSerialize["gitCommit"] = o.GitCommit
	}
	if true {
		toSerialize["gitTreeState"] = o.GitTreeState
	}
	if true {
		toSerialize["gitVersion"] = o.GitVersion
	}
	if true {
		toSerialize["goVersion"] = o.GoVersion
	}
	if true {
		toSerialize["major"] = o.Major
	}
	if true {
		toSerialize["minor"] = o.Minor
	}
	if true {
		toSerialize["platform"] = o.Platform
	}
	return json.Marshal(toSerialize)
}

type NullableVersionInfo struct {
	value *VersionInfo
	isSet bool
}

func (v NullableVersionInfo) Get() *VersionInfo {
	return v.value
}

func (v *NullableVersionInfo) Set(val *VersionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionInfo(val *VersionInfo) *NullableVersionInfo {
	return &NullableVersionInfo{value: val, isSet: true}
}

func (v NullableVersionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


