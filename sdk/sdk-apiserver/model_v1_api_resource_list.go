//
// Copyright Â© 2023-2024 StreamNative Inc.
//

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// V1APIResourceList APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.
type V1APIResourceList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`
	// groupVersion is the group and version this APIResourceList is for.
	GroupVersion string `json:"groupVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// resources contains the name of the resources and if they are namespaced.
	Resources []V1APIResource `json:"resources"`
}

// NewV1APIResourceList instantiates a new V1APIResourceList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1APIResourceList(groupVersion string, resources []V1APIResource) *V1APIResourceList {
	this := V1APIResourceList{}
	this.GroupVersion = groupVersion
	this.Resources = resources
	return &this
}

// NewV1APIResourceListWithDefaults instantiates a new V1APIResourceList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1APIResourceListWithDefaults() *V1APIResourceList {
	this := V1APIResourceList{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *V1APIResourceList) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1APIResourceList) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *V1APIResourceList) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *V1APIResourceList) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetGroupVersion returns the GroupVersion field value
func (o *V1APIResourceList) GetGroupVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupVersion
}

// GetGroupVersionOk returns a tuple with the GroupVersion field value
// and a boolean to check if the value has been set.
func (o *V1APIResourceList) GetGroupVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupVersion, true
}

// SetGroupVersion sets field value
func (o *V1APIResourceList) SetGroupVersion(v string) {
	o.GroupVersion = v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *V1APIResourceList) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1APIResourceList) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *V1APIResourceList) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *V1APIResourceList) SetKind(v string) {
	o.Kind = &v
}

// GetResources returns the Resources field value
func (o *V1APIResourceList) GetResources() []V1APIResource {
	if o == nil {
		var ret []V1APIResource
		return ret
	}

	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value
// and a boolean to check if the value has been set.
func (o *V1APIResourceList) GetResourcesOk() ([]V1APIResource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resources, true
}

// SetResources sets field value
func (o *V1APIResourceList) SetResources(v []V1APIResource) {
	o.Resources = v
}

func (o V1APIResourceList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if true {
		toSerialize["groupVersion"] = o.GroupVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["resources"] = o.Resources
	}
	return json.Marshal(toSerialize)
}

type NullableV1APIResourceList struct {
	value *V1APIResourceList
	isSet bool
}

func (v NullableV1APIResourceList) Get() *V1APIResourceList {
	return v.value
}

func (v *NullableV1APIResourceList) Set(val *V1APIResourceList) {
	v.value = val
	v.isSet = true
}

func (v NullableV1APIResourceList) IsSet() bool {
	return v.isSet
}

func (v *NullableV1APIResourceList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1APIResourceList(val *V1APIResourceList) *NullableV1APIResourceList {
	return &NullableV1APIResourceList{value: val, isSet: true}
}

func (v NullableV1APIResourceList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1APIResourceList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


