// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network Network defines how to provision the network infrastructure CIDR and ID cannot be specified at the same time. When ID is specified, the existing VPC will be used. Otherwise, a new VPC with the specified or default CIDR will be created
type ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network struct {
	// CIDR determines the CIDR of the VPC to create if specified
	Cidr *string `json:"cidr,omitempty"`
	// ID is the id or the name of an existing VPC when specified. It's vpc id in AWS, vpc network name in GCP and vnet name in Azure
	Id *string `json:"id,omitempty"`
	// SubnetCIDR determines the CIDR of the subnet to create if specified required for Azure
	SubnetCIDR *string `json:"subnetCIDR,omitempty"`
}

// NewComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network instantiates a new ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network() *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network {
	this := ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network{}
	return &this
}

// NewComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1NetworkWithDefaults instantiates a new ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1NetworkWithDefaults() *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network {
	this := ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network{}
	return &this
}

// GetCidr returns the Cidr field value if set, zero value otherwise.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) GetCidr() string {
	if o == nil || o.Cidr == nil {
		var ret string
		return ret
	}
	return *o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) GetCidrOk() (*string, bool) {
	if o == nil || o.Cidr == nil {
		return nil, false
	}
	return o.Cidr, true
}

// HasCidr returns a boolean if a field has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) HasCidr() bool {
	if o != nil && o.Cidr != nil {
		return true
	}

	return false
}

// SetCidr gets a reference to the given string and assigns it to the Cidr field.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) SetCidr(v string) {
	o.Cidr = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) SetId(v string) {
	o.Id = &v
}

// GetSubnetCIDR returns the SubnetCIDR field value if set, zero value otherwise.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) GetSubnetCIDR() string {
	if o == nil || o.SubnetCIDR == nil {
		var ret string
		return ret
	}
	return *o.SubnetCIDR
}

// GetSubnetCIDROk returns a tuple with the SubnetCIDR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) GetSubnetCIDROk() (*string, bool) {
	if o == nil || o.SubnetCIDR == nil {
		return nil, false
	}
	return o.SubnetCIDR, true
}

// HasSubnetCIDR returns a boolean if a field has been set.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) HasSubnetCIDR() bool {
	if o != nil && o.SubnetCIDR != nil {
		return true
	}

	return false
}

// SetSubnetCIDR gets a reference to the given string and assigns it to the SubnetCIDR field.
func (o *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) SetSubnetCIDR(v string) {
	o.SubnetCIDR = &v
}

func (o ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cidr != nil {
		toSerialize["cidr"] = o.Cidr
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.SubnetCIDR != nil {
		toSerialize["subnetCIDR"] = o.SubnetCIDR
	}
	return json.Marshal(toSerialize)
}

type NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network struct {
	value *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network
	isSet bool
}

func (v NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) Get() *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network {
	return v.value
}

func (v *NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) Set(val *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) {
	v.value = val
	v.isSet = true
}

func (v NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) IsSet() bool {
	return v.isSet
}

func (v *NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network(val *ComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) *NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network {
	return &NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network{value: val, isSet: true}
}

func (v NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComGithubStreamnativeCloudApiServerPkgApisCloudV1alpha1Network) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


