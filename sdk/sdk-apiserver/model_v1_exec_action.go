// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// V1ExecAction ExecAction describes a \"run in container\" action.
type V1ExecAction struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `json:"command,omitempty"`
}

// NewV1ExecAction instantiates a new V1ExecAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ExecAction() *V1ExecAction {
	this := V1ExecAction{}
	return &this
}

// NewV1ExecActionWithDefaults instantiates a new V1ExecAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ExecActionWithDefaults() *V1ExecAction {
	this := V1ExecAction{}
	return &this
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *V1ExecAction) GetCommand() []string {
	if o == nil || o.Command == nil {
		var ret []string
		return ret
	}
	return o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ExecAction) GetCommandOk() ([]string, bool) {
	if o == nil || o.Command == nil {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *V1ExecAction) HasCommand() bool {
	if o != nil && o.Command != nil {
		return true
	}

	return false
}

// SetCommand gets a reference to the given []string and assigns it to the Command field.
func (o *V1ExecAction) SetCommand(v []string) {
	o.Command = v
}

func (o V1ExecAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Command != nil {
		toSerialize["command"] = o.Command
	}
	return json.Marshal(toSerialize)
}

type NullableV1ExecAction struct {
	value *V1ExecAction
	isSet bool
}

func (v NullableV1ExecAction) Get() *V1ExecAction {
	return v.value
}

func (v *NullableV1ExecAction) Set(val *V1ExecAction) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ExecAction) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ExecAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ExecAction(val *V1ExecAction) *NullableV1ExecAction {
	return &NullableV1ExecAction{value: val, isSet: true}
}

func (v NullableV1ExecAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ExecAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


