// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/*
Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sncloud

import (
	"encoding/json"
)

// V1ConfigMapEnvSource ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.  The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type V1ConfigMapEnvSource struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
	// Specify whether the ConfigMap must be defined
	Optional *bool `json:"optional,omitempty"`
}

// NewV1ConfigMapEnvSource instantiates a new V1ConfigMapEnvSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ConfigMapEnvSource() *V1ConfigMapEnvSource {
	this := V1ConfigMapEnvSource{}
	return &this
}

// NewV1ConfigMapEnvSourceWithDefaults instantiates a new V1ConfigMapEnvSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ConfigMapEnvSourceWithDefaults() *V1ConfigMapEnvSource {
	this := V1ConfigMapEnvSource{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1ConfigMapEnvSource) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigMapEnvSource) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1ConfigMapEnvSource) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1ConfigMapEnvSource) SetName(v string) {
	o.Name = &v
}

// GetOptional returns the Optional field value if set, zero value otherwise.
func (o *V1ConfigMapEnvSource) GetOptional() bool {
	if o == nil || o.Optional == nil {
		var ret bool
		return ret
	}
	return *o.Optional
}

// GetOptionalOk returns a tuple with the Optional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigMapEnvSource) GetOptionalOk() (*bool, bool) {
	if o == nil || o.Optional == nil {
		return nil, false
	}
	return o.Optional, true
}

// HasOptional returns a boolean if a field has been set.
func (o *V1ConfigMapEnvSource) HasOptional() bool {
	if o != nil && o.Optional != nil {
		return true
	}

	return false
}

// SetOptional gets a reference to the given bool and assigns it to the Optional field.
func (o *V1ConfigMapEnvSource) SetOptional(v bool) {
	o.Optional = &v
}

func (o V1ConfigMapEnvSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Optional != nil {
		toSerialize["optional"] = o.Optional
	}
	return json.Marshal(toSerialize)
}

type NullableV1ConfigMapEnvSource struct {
	value *V1ConfigMapEnvSource
	isSet bool
}

func (v NullableV1ConfigMapEnvSource) Get() *V1ConfigMapEnvSource {
	return v.value
}

func (v *NullableV1ConfigMapEnvSource) Set(val *V1ConfigMapEnvSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ConfigMapEnvSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ConfigMapEnvSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ConfigMapEnvSource(val *V1ConfigMapEnvSource) *NullableV1ConfigMapEnvSource {
	return &NullableV1ConfigMapEnvSource{value: val, isSet: true}
}

func (v NullableV1ConfigMapEnvSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ConfigMapEnvSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


