/*
Kafka Connect With Pulsar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafkaconnect

import (
	"encoding/json"
)

// checks if the SNConnectorOffset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SNConnectorOffset{}

// SNConnectorOffset struct for SNConnectorOffset
type SNConnectorOffset struct {
	Offset *map[string]int32 `json:"offset,omitempty"`
	Partition *map[string]string `json:"partition,omitempty"`
}

// NewSNConnectorOffset instantiates a new SNConnectorOffset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSNConnectorOffset() *SNConnectorOffset {
	this := SNConnectorOffset{}
	return &this
}

// NewSNConnectorOffsetWithDefaults instantiates a new SNConnectorOffset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSNConnectorOffsetWithDefaults() *SNConnectorOffset {
	this := SNConnectorOffset{}
	return &this
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *SNConnectorOffset) GetOffset() map[string]int32 {
	if o == nil || IsNil(o.Offset) {
		var ret map[string]int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SNConnectorOffset) GetOffsetOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *SNConnectorOffset) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given map[string]int32 and assigns it to the Offset field.
func (o *SNConnectorOffset) SetOffset(v map[string]int32) {
	o.Offset = &v
}

// GetPartition returns the Partition field value if set, zero value otherwise.
func (o *SNConnectorOffset) GetPartition() map[string]string {
	if o == nil || IsNil(o.Partition) {
		var ret map[string]string
		return ret
	}
	return *o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SNConnectorOffset) GetPartitionOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Partition) {
		return nil, false
	}
	return o.Partition, true
}

// HasPartition returns a boolean if a field has been set.
func (o *SNConnectorOffset) HasPartition() bool {
	if o != nil && !IsNil(o.Partition) {
		return true
	}

	return false
}

// SetPartition gets a reference to the given map[string]string and assigns it to the Partition field.
func (o *SNConnectorOffset) SetPartition(v map[string]string) {
	o.Partition = &v
}

func (o SNConnectorOffset) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SNConnectorOffset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Partition) {
		toSerialize["partition"] = o.Partition
	}
	return toSerialize, nil
}

type NullableSNConnectorOffset struct {
	value *SNConnectorOffset
	isSet bool
}

func (v NullableSNConnectorOffset) Get() *SNConnectorOffset {
	return v.value
}

func (v *NullableSNConnectorOffset) Set(val *SNConnectorOffset) {
	v.value = val
	v.isSet = true
}

func (v NullableSNConnectorOffset) IsSet() bool {
	return v.isSet
}

func (v *NullableSNConnectorOffset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSNConnectorOffset(val *SNConnectorOffset) *NullableSNConnectorOffset {
	return &NullableSNConnectorOffset{value: val, isSet: true}
}

func (v NullableSNConnectorOffset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSNConnectorOffset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


