/*
Kafka Connect With Pulsar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafkaconnect

import (
	"encoding/json"
)

// checks if the SNConnectorOffsets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SNConnectorOffsets{}

// SNConnectorOffsets struct for SNConnectorOffsets
type SNConnectorOffsets struct {
	Offsets []SNConnectorOffset `json:"offsets,omitempty"`
}

// NewSNConnectorOffsets instantiates a new SNConnectorOffsets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSNConnectorOffsets() *SNConnectorOffsets {
	this := SNConnectorOffsets{}
	return &this
}

// NewSNConnectorOffsetsWithDefaults instantiates a new SNConnectorOffsets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSNConnectorOffsetsWithDefaults() *SNConnectorOffsets {
	this := SNConnectorOffsets{}
	return &this
}

// GetOffsets returns the Offsets field value if set, zero value otherwise.
func (o *SNConnectorOffsets) GetOffsets() []SNConnectorOffset {
	if o == nil || IsNil(o.Offsets) {
		var ret []SNConnectorOffset
		return ret
	}
	return o.Offsets
}

// GetOffsetsOk returns a tuple with the Offsets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SNConnectorOffsets) GetOffsetsOk() ([]SNConnectorOffset, bool) {
	if o == nil || IsNil(o.Offsets) {
		return nil, false
	}
	return o.Offsets, true
}

// HasOffsets returns a boolean if a field has been set.
func (o *SNConnectorOffsets) HasOffsets() bool {
	if o != nil && !IsNil(o.Offsets) {
		return true
	}

	return false
}

// SetOffsets gets a reference to the given []SNConnectorOffset and assigns it to the Offsets field.
func (o *SNConnectorOffsets) SetOffsets(v []SNConnectorOffset) {
	o.Offsets = v
}

func (o SNConnectorOffsets) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SNConnectorOffsets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Offsets) {
		toSerialize["offsets"] = o.Offsets
	}
	return toSerialize, nil
}

type NullableSNConnectorOffsets struct {
	value *SNConnectorOffsets
	isSet bool
}

func (v NullableSNConnectorOffsets) Get() *SNConnectorOffsets {
	return v.value
}

func (v *NullableSNConnectorOffsets) Set(val *SNConnectorOffsets) {
	v.value = val
	v.isSet = true
}

func (v NullableSNConnectorOffsets) IsSet() bool {
	return v.isSet
}

func (v *NullableSNConnectorOffsets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSNConnectorOffsets(val *SNConnectorOffsets) *NullableSNConnectorOffsets {
	return &NullableSNConnectorOffsets{value: val, isSet: true}
}

func (v NullableSNConnectorOffsets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSNConnectorOffsets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


