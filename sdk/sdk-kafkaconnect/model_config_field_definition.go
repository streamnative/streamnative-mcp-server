/*
Kafka Connect With Pulsar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafkaconnect

import (
	"encoding/json"
)

// checks if the ConfigFieldDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigFieldDefinition{}

// ConfigFieldDefinition struct for ConfigFieldDefinition
type ConfigFieldDefinition struct {
	Attributes *map[string]string `json:"attributes,omitempty"`
	FieldName *string `json:"fieldName,omitempty"`
	TypeName *string `json:"typeName,omitempty"`
}

// NewConfigFieldDefinition instantiates a new ConfigFieldDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigFieldDefinition() *ConfigFieldDefinition {
	this := ConfigFieldDefinition{}
	return &this
}

// NewConfigFieldDefinitionWithDefaults instantiates a new ConfigFieldDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigFieldDefinitionWithDefaults() *ConfigFieldDefinition {
	this := ConfigFieldDefinition{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ConfigFieldDefinition) GetAttributes() map[string]string {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]string
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigFieldDefinition) GetAttributesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ConfigFieldDefinition) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]string and assigns it to the Attributes field.
func (o *ConfigFieldDefinition) SetAttributes(v map[string]string) {
	o.Attributes = &v
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *ConfigFieldDefinition) GetFieldName() string {
	if o == nil || IsNil(o.FieldName) {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigFieldDefinition) GetFieldNameOk() (*string, bool) {
	if o == nil || IsNil(o.FieldName) {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *ConfigFieldDefinition) HasFieldName() bool {
	if o != nil && !IsNil(o.FieldName) {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *ConfigFieldDefinition) SetFieldName(v string) {
	o.FieldName = &v
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *ConfigFieldDefinition) GetTypeName() string {
	if o == nil || IsNil(o.TypeName) {
		var ret string
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigFieldDefinition) GetTypeNameOk() (*string, bool) {
	if o == nil || IsNil(o.TypeName) {
		return nil, false
	}
	return o.TypeName, true
}

// HasTypeName returns a boolean if a field has been set.
func (o *ConfigFieldDefinition) HasTypeName() bool {
	if o != nil && !IsNil(o.TypeName) {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given string and assigns it to the TypeName field.
func (o *ConfigFieldDefinition) SetTypeName(v string) {
	o.TypeName = &v
}

func (o ConfigFieldDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigFieldDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.FieldName) {
		toSerialize["fieldName"] = o.FieldName
	}
	if !IsNil(o.TypeName) {
		toSerialize["typeName"] = o.TypeName
	}
	return toSerialize, nil
}

type NullableConfigFieldDefinition struct {
	value *ConfigFieldDefinition
	isSet bool
}

func (v NullableConfigFieldDefinition) Get() *ConfigFieldDefinition {
	return v.value
}

func (v *NullableConfigFieldDefinition) Set(val *ConfigFieldDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigFieldDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigFieldDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigFieldDefinition(val *ConfigFieldDefinition) *NullableConfigFieldDefinition {
	return &NullableConfigFieldDefinition{value: val, isSet: true}
}

func (v NullableConfigFieldDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigFieldDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


